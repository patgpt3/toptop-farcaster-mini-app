"use strict";var e=require("@abstract-foundation/agw-client"),r=require("viem"),n=require("viem/accounts"),s=require("viem/chains"),i=require("../client/user.js"),t=require("../hooks/internal-context.js"),o=require("../hooks/modal-context.js"),a=require("../hooks/privy-context.js"),c=require("../hooks/useWallets.js"),u=require("../screens/index.js"),l=require("../utils/index.js"),d=require("./getEmbeddedConnectedWallet.js"),q=require("./smart-wallets.js");require("@ethersproject/address"),require("react"),require("../hooks/index.js"),require("react/jsx-runtime"),require("../components/PrefetchedImage.js"),require("../configuration/context.js"),require("../config.js"),require("../configuration/defaultClientConfig.js"),require("../constants.js"),require("../configuration/login-methods.js"),require("../configuration/wallets.js"),require("../connectors/chains/index.js"),require("../connectors/chains/arbitrum.js"),require("../connectors/chains/arbitrumSepolia.js"),require("../connectors/chains/avalanche.js"),require("../connectors/chains/avalancheFuji.js"),require("../connectors/chains/base.js"),require("../connectors/chains/baseSepolia.js"),require("../connectors/chains/berachainArtio.js"),require("../connectors/chains/celo.js"),require("../connectors/chains/celoAlfajores.js"),require("../connectors/chains/filecoin.js"),require("../connectors/chains/filecoinCalibration.js"),require("../connectors/chains/garnetHolesky.js"),require("../connectors/chains/holesky.js"),require("../connectors/chains/linea.js"),require("../connectors/chains/lineaTestnet.js"),require("../connectors/chains/lukso.js"),require("../connectors/chains/mainnet.js"),require("../connectors/chains/optimism.js"),require("../connectors/chains/optimismSepolia.js"),require("../connectors/chains/polygon.js"),require("../connectors/chains/polygonAmoy.js"),require("../connectors/chains/redstone.js"),require("../connectors/chains/sepolia.js"),require("../connectors/chains/zora.js"),require("../connectors/chains/zoraSepolia.js"),require("../connectors/chains/zoraTestnet.js"),require("../connectors/chains/utils.js"),require("./solana/index.js"),require("../theme.js"),require("tinycolor2"),require("./cybr53.js"),require("@ethersproject/providers"),require("../connectors/get-legacy-injected-providers.js"),require("../connectors/is-wallet-installed.js"),require("../errors.js"),require("ofetch"),require("../hooks/useSmartWalletChain.js"),require("./smart-wallets-shared.js"),require("permissionless"),require("permissionless/accounts"),require("permissionless/clients/pimlico"),require("viem/account-abstraction"),require("@privy-io/js-sdk-core"),exports.useAbstractSmartWallets=function(){let{user:h}=a.usePrivyContext(),{noPromptOnSignature:p,openPrivyModal:j,chains:g,appId:E,rpcConfig:m}=t.usePrivyInternal(),{wallets:y}=c.useWallets(),{setModalData:f}=o.usePrivyModal(),T=async(i=s.abstractTestnet.id)=>{let t=d.getEmbeddedConnectedWallet(y);if(!t)throw Error("No connected wallet found");if(![s.abstractTestnet.id,2741].includes(i))throw Error("Error, only Abstract chains are supported");let o=g.find((e=>e.id===i));if(!o)throw Error("Chain not configured");await t.switchChain(o.id);let a=await t.getEthereumProvider(),c=r.createWalletClient({account:t.address,transport:r.custom(a)}),u=n.toAccount({address:t.address,signMessage:c.signMessage,signTransaction:c.signTransaction,signTypedData:c.signTypedData});return await e.createAbstractClient({chain:{...o,rpcUrls:{default:{http:[l.getJsonRpcEndpointFromChain(o,m,E)]}}},signer:u})};return{signMessage:async({message:e})=>{let r=await T();return new Promise((async(n,s)=>{let{entropyId:t,entropyIdVerifier:o}=i.getEntropyDetailsFromUser(h);p.current=!0,f({connectWallet:{entropyId:t,entropyIdVerifier:o,onCompleteNavigateTo:u.ModalScreen.EMBEDDED_WALLET_SIGN_REQUEST_SCREEN,onFailure:()=>{}},signMessage:{method:"personal_sign",data:e,confirmAndSign:()=>r.signMessage({message:e}),onSuccess:e=>n(e),onFailure:s,uiOptions:{}}}),j(u.ModalScreen.EMBEDDED_WALLET_CONNECTING_SCREEN)})).finally((()=>{p.current=!1}))},signTypedData:async e=>{let r=await T();return new Promise((async(n,s)=>{p.current=!0;let{entropyId:t,entropyIdVerifier:o}=i.getEntropyDetailsFromUser(h);f({connectWallet:{entropyId:t,entropyIdVerifier:o,onCompleteNavigateTo:u.ModalScreen.EMBEDDED_WALLET_SIGN_REQUEST_SCREEN,onFailure:()=>{}},signMessage:{method:"eth_signTypedData_v4",data:e,confirmAndSign:()=>r.signTypedData(e),onSuccess:e=>n(e),onFailure:s,uiOptions:{}}}),j(u.ModalScreen.EMBEDDED_WALLET_CONNECTING_SCREEN)})).finally((()=>{p.current=!1}))},sendTransaction:async e=>{let r=await T(e.chainId),n=[],s="calls"in e&&void 0!==e.calls;return n=s?[...e.calls]:[e],new Promise((async(t,o)=>{p.current=!0;let{entropyId:a,entropyIdVerifier:c}=i.getEntropyDetailsFromUser(h);f({connectWallet:{entropyId:a,entropyIdVerifier:c,onCompleteNavigateTo:u.ModalScreen.EMBEDDED_WALLET_SEND_TRANSACTION_SCREEN,onFailure:()=>{}},sendTransaction:{transactionRequests:q.callsToTransactionRequests({calls:n,chain:r.chain,maxPriorityFeePerGas:e.maxPriorityFeePerGas,maxFeePerGas:e.maxFeePerGas,nonce:e.nonce?BigInt(e.nonce):void 0}),entropyId:a,entropyIdVerifier:c,transactingWallet:{address:r.account.address,walletIndex:null},getIsSponsored:async()=>void 0!==e.paymaster&&void 0!==e.paymasterInput,onConfirm:()=>s?r.sendTransactionBatch(e):r.sendTransaction(e),onSuccess:e=>t(e.hash),onFailure:o,uiOptions:{}}}),j(u.ModalScreen.EMBEDDED_WALLET_CONNECTING_SCREEN)})).finally((()=>{p.current=!1}))}}};
