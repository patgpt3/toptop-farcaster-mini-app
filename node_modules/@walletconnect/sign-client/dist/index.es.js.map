{"version":3,"file":"index.es.js","sources":["../src/constants/client.ts","../src/constants/history.ts","../src/constants/proposal.ts","../src/constants/session.ts","../src/constants/engine.ts","../src/constants/pendingRequest.ts","../src/constants/verify.ts","../src/constants/auth.ts","../src/controllers/engine.ts","../src/controllers/proposal.ts","../src/controllers/session.ts","../src/controllers/pendingRequest.ts","../src/controllers/authKey.ts","../src/controllers/authPairingTopic.ts","../src/controllers/authRequest.ts","../src/controllers/authStore.ts","../src/client.ts","../src/index.ts"],"sourcesContent":["import { SignClientTypes } from \"@walletconnect/types\";\n\nexport const SIGN_CLIENT_PROTOCOL = \"wc\";\nexport const SIGN_CLIENT_VERSION = 2;\nexport const SIGN_CLIENT_CONTEXT = \"client\";\n\nexport const SIGN_CLIENT_STORAGE_PREFIX = `${SIGN_CLIENT_PROTOCOL}@${SIGN_CLIENT_VERSION}:${SIGN_CLIENT_CONTEXT}:`;\n\nexport const SIGN_CLIENT_DEFAULT = {\n  name: SIGN_CLIENT_CONTEXT,\n  logger: \"error\",\n  controller: false,\n  relayUrl: \"wss://relay.walletconnect.org\",\n};\n\nexport const SIGN_CLIENT_EVENTS: Record<SignClientTypes.Event, SignClientTypes.Event> = {\n  session_proposal: \"session_proposal\",\n  session_update: \"session_update\",\n  session_extend: \"session_extend\",\n  session_ping: \"session_ping\",\n  session_delete: \"session_delete\",\n  session_expire: \"session_expire\",\n  session_request: \"session_request\",\n  session_request_sent: \"session_request_sent\",\n  session_event: \"session_event\",\n  proposal_expire: \"proposal_expire\",\n  session_authenticate: \"session_authenticate\",\n  session_request_expire: \"session_request_expire\",\n  session_connect: \"session_connect\",\n};\n\nexport const SIGN_CLIENT_STORAGE_OPTIONS = {\n  database: \":memory:\",\n};\n\nexport const WALLETCONNECT_DEEPLINK_CHOICE = \"WALLETCONNECT_DEEPLINK_CHOICE\";\n","export const HISTORY_EVENTS = {\n  created: \"history_created\",\n  updated: \"history_updated\",\n  deleted: \"history_deleted\",\n  sync: \"history_sync\",\n};\n\nexport const HISTORY_CONTEXT = \"history\";\n\nexport const HISTORY_STORAGE_VERSION = \"0.3\";\n","import { THIRTY_DAYS } from \"@walletconnect/time\";\n\nexport const PROPOSAL_CONTEXT = \"proposal\";\n\nexport const PROPOSAL_EXPIRY = THIRTY_DAYS;\n\nexport const PROPOSAL_EXPIRY_MESSAGE = \"Proposal expired\";\n","import { SEVEN_DAYS } from \"@walletconnect/time\";\n\nexport const SESSION_CONTEXT = \"session\";\n\nexport const SESSION_EXPIRY = SEVEN_DAYS;\n","import { FIVE_MINUTES, ONE_DAY, ONE_HOUR, SEVEN_DAYS } from \"@walletconnect/time\";\nimport { EngineTypes } from \"@walletconnect/types\";\n\nexport const ENGINE_CONTEXT = \"engine\";\n\nexport const ENGINE_RPC_OPTS: EngineTypes.RpcOptsMap = {\n  wc_sessionPropose: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1100,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1101,\n    },\n    reject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1120,\n    },\n    autoReject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1121,\n    },\n  },\n  wc_sessionSettle: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1102,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1103,\n    },\n  },\n  wc_sessionUpdate: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1104,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1105,\n    },\n  },\n  wc_sessionExtend: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1106,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1107,\n    },\n  },\n  wc_sessionRequest: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1108,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1109,\n    },\n  },\n  wc_sessionEvent: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1110,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1111,\n    },\n  },\n\n  wc_sessionDelete: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1112,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1113,\n    },\n  },\n  wc_sessionPing: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1114,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1115,\n    },\n  },\n  wc_sessionAuthenticate: {\n    req: {\n      ttl: ONE_HOUR,\n      prompt: true,\n      tag: 1116,\n    },\n    res: {\n      ttl: ONE_HOUR,\n      prompt: false,\n      tag: 1117,\n    },\n    reject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1118,\n    },\n    autoReject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1119,\n    },\n  },\n};\n\nexport const SESSION_REQUEST_EXPIRY_BOUNDARIES = {\n  min: FIVE_MINUTES,\n  max: SEVEN_DAYS,\n};\n\nexport const ENGINE_QUEUE_STATES: { idle: \"IDLE\"; active: \"ACTIVE\" } = {\n  idle: \"IDLE\",\n  active: \"ACTIVE\",\n};\n\nexport const TVF_METHODS = {\n  // evm\n  eth_sendTransaction: {\n    key: \"\",\n  },\n  eth_sendRawTransaction: {\n    key: \"\",\n  },\n  wallet_sendCalls: {\n    key: \"\",\n  },\n\n  // solana\n  solana_signTransaction: {\n    key: \"signature\",\n  },\n  solana_signAllTransactions: {\n    key: \"transactions\",\n  },\n  solana_signAndSendTransaction: {\n    key: \"signature\",\n  },\n\n  // sui\n  sui_signAndExecuteTransaction: {\n    key: \"digest\",\n  },\n  sui_signTransaction: {\n    key: \"\",\n  },\n\n  // hedera\n  hedera_signAndExecuteTransaction: {\n    key: \"transactionId\",\n  },\n  hedera_executeTransaction: {\n    key: \"transactionId\",\n  },\n\n  // near\n  near_signTransaction: {\n    key: \"\",\n  },\n  near_signTransactions: {\n    key: \"\",\n  },\n\n  // tron\n  tron_signTransaction: {\n    key: \"txID\",\n  },\n\n  // xrpl\n  xrpl_signTransaction: {\n    key: \"\",\n  },\n\n  xrpl_signTransactionFor: {\n    key: \"\",\n  },\n\n  // algorand\n  algo_signTxn: {\n    key: \"\",\n  },\n\n  // bitcoin\n  sendTransfer: {\n    key: \"txid\",\n  },\n\n  // stacks\n  stacks_stxTransfer: {\n    key: \"txId\",\n  },\n\n  // polkadot\n  polkadot_signTransaction: {\n    key: \"\",\n  },\n\n  // cosmos\n  cosmos_signDirect: {\n    key: \"\",\n  },\n};\n","export const REQUEST_CONTEXT = \"request\";\n","export const METHODS_TO_VERIFY = [\n  \"wc_sessionPropose\",\n  \"wc_sessionRequest\",\n  \"wc_authRequest\",\n  \"wc_sessionAuthenticate\",\n];\n","export const AUTH_PROTOCOL = \"wc\";\nexport const AUTH_VERSION = 1.5;\nexport const AUTH_CONTEXT = \"auth\";\nexport const AUTH_KEYS_CONTEXT = \"authKeys\";\nexport const AUTH_PAIRING_TOPIC_CONTEXT = \"pairingTopics\";\nexport const AUTH_REQUEST_CONTEXT = \"requests\";\n\nexport const AUTH_STORAGE_PREFIX = `${AUTH_PROTOCOL}@${AUTH_VERSION}:${AUTH_CONTEXT}:`;\nexport const AUTH_PUBLIC_KEY_NAME = `${AUTH_STORAGE_PREFIX}:PUB_KEY`;\n","import {\n  EVENT_CLIENT_AUTHENTICATE_ERRORS,\n  EVENT_CLIENT_AUTHENTICATE_TRACES,\n  EVENT_CLIENT_PAIRING_ERRORS,\n  EVENT_CLIENT_PAIRING_TRACES,\n  EVENT_CLIENT_SESSION_ERRORS,\n  EVENT_CLIENT_SESSION_TRACES,\n  EXPIRER_EVENTS,\n  PAIRING_EVENTS,\n  RELAYER_DEFAULT_PROTOCOL,\n  RELAYER_EVENTS,\n  TRANSPORT_TYPES,\n  VERIFY_SERVER,\n} from \"@walletconnect/core\";\n\nimport {\n  formatJsonRpcError,\n  formatJsonRpcRequest,\n  formatJsonRpcResult,\n  payloadId,\n  isJsonRpcError,\n  isJsonRpcRequest,\n  isJsonRpcResponse,\n  isJsonRpcResult,\n  JsonRpcRequest,\n  ErrorResponse,\n  getBigIntRpcId,\n} from \"@walletconnect/jsonrpc-utils\";\nimport { FIVE_MINUTES, ONE_SECOND, toMiliseconds } from \"@walletconnect/time\";\nimport {\n  EnginePrivate,\n  EngineTypes,\n  ExpirerTypes,\n  IEngine,\n  IEngineEvents,\n  JsonRpcTypes,\n  PendingRequestTypes,\n  Verify,\n  CoreTypes,\n  ProposalTypes,\n  RelayerTypes,\n  SessionTypes,\n  PairingTypes,\n  AuthTypes,\n  EventClientTypes,\n} from \"@walletconnect/types\";\nimport {\n  calcExpiry,\n  createDelayedPromise,\n  engineEvent,\n  getInternalError,\n  getSdkError,\n  isConformingNamespaces,\n  isExpired,\n  isSessionCompatible,\n  isUndefined,\n  isValidController,\n  isValidErrorReason,\n  isValidEvent,\n  isValidId,\n  isValidNamespaces,\n  isValidNamespacesChainId,\n  isValidNamespacesEvent,\n  isValidNamespacesRequest,\n  isValidObject,\n  isValidParams,\n  isValidRelay,\n  isValidRelays,\n  isValidRequest,\n  isValidRequestExpiry,\n  hashMessage,\n  isValidRequiredNamespaces,\n  isValidResponse,\n  isValidString,\n  parseExpirerTarget,\n  TYPE_1,\n  TYPE_2,\n  handleDeeplinkRedirect,\n  MemoryStore,\n  getDeepLink,\n  hashKey,\n  getDidAddress,\n  formatMessage,\n  getMethodsFromRecap,\n  buildNamespacesFromAuth,\n  createEncodedRecap,\n  getChainsFromRecap,\n  mergeEncodedRecaps,\n  getRecapFromResources,\n  validateSignedCacao,\n  getNamespacedDidChainId,\n  parseChainId,\n  getLinkModeURL,\n  BASE64,\n  BASE64URL,\n  getSearchParamFromURL,\n  isReactNative,\n  isTestRun,\n  isValidArray,\n  extractSolanaTransactionId,\n  getSuiDigest,\n  mergeRequiredAndOptionalNamespaces,\n  getNearTransactionIdFromSignedTransaction,\n  getAlgorandTransactionId,\n  buildSignedExtrinsicHash,\n  getSignDirectHash,\n  LimitedSet,\n} from \"@walletconnect/utils\";\nimport EventEmmiter from \"events\";\nimport {\n  ENGINE_CONTEXT,\n  ENGINE_RPC_OPTS,\n  PROPOSAL_EXPIRY_MESSAGE,\n  SESSION_EXPIRY,\n  SESSION_REQUEST_EXPIRY_BOUNDARIES,\n  METHODS_TO_VERIFY,\n  WALLETCONNECT_DEEPLINK_CHOICE,\n  ENGINE_QUEUE_STATES,\n  AUTH_PUBLIC_KEY_NAME,\n  TVF_METHODS,\n} from \"../constants\";\n\nexport class Engine extends IEngine {\n  public name = ENGINE_CONTEXT;\n\n  private events: IEngineEvents = new EventEmmiter();\n  private initialized = false;\n\n  /**\n   * Queue responsible for processing incoming requests such as session_update, session_event, session_ping etc\n   * It's needed when the client receives multiple requests at once from the mailbox immediately after initialization and to avoid attempting to process them all at the same time\n   */\n  private requestQueue: EngineTypes.EngineQueue<EngineTypes.EventCallback<JsonRpcRequest>> = {\n    state: ENGINE_QUEUE_STATES.idle,\n    queue: [],\n  };\n\n  /**\n   * Queue responsible for processing incoming session_request\n   * The queue emits the next request only after the previous one has been responded to\n   */\n  private sessionRequestQueue: EngineTypes.EngineQueue<PendingRequestTypes.Struct> = {\n    state: ENGINE_QUEUE_STATES.idle,\n    queue: [],\n  };\n\n  // This prevents duplicate emissions due to WalletConnect's at-least-once delivery guarantee.\n  // When disableRequestQueue is enabled, consumers must implement additional deduplication.\n  private emittedSessionRequests = new LimitedSet({ limit: 500 });\n\n  private requestQueueDelay = ONE_SECOND;\n  private expectedPairingMethodMap: Map<string, string[]> = new Map();\n  // Ephemeral (in-memory) map to store recently deleted items\n  private recentlyDeletedMap = new Map<\n    string | number,\n    \"pairing\" | \"session\" | \"proposal\" | \"request\"\n  >();\n\n  private recentlyDeletedLimit = 200;\n  private relayMessageCache: RelayerTypes.MessageEvent[] = [];\n  private pendingSessions: Map<\n    number,\n    {\n      sessionTopic: string;\n      pairingTopic: string;\n      proposalId: number;\n      publicKey: string;\n    }\n  > = new Map();\n\n  constructor(client: IEngine[\"client\"]) {\n    super(client);\n  }\n\n  public init: IEngine[\"init\"] = async () => {\n    if (!this.initialized) {\n      await this.cleanup();\n      this.registerRelayerEvents();\n      this.registerExpirerEvents();\n      this.registerPairingEvents();\n      await this.registerLinkModeListeners();\n      this.client.core.pairing.register({ methods: Object.keys(ENGINE_RPC_OPTS) });\n      this.initialized = true;\n      setTimeout(async () => {\n        await this.processPendingMessageEvents();\n\n        this.sessionRequestQueue.queue = this.getPendingSessionRequests();\n        this.processSessionRequestQueue();\n      }, toMiliseconds(this.requestQueueDelay));\n    }\n  };\n\n  private async processPendingMessageEvents() {\n    try {\n      const topics = this.client.session.keys;\n      const pendingMessages = this.client.core.relayer.messages.getWithoutAck(topics);\n      for (const [topic, messages] of Object.entries(pendingMessages)) {\n        for (const message of messages) {\n          try {\n            await this.onProviderMessageEvent({\n              topic,\n              message,\n              publishedAt: Date.now(),\n            });\n          } catch (error) {\n            this.client.logger.warn(\n              `Error processing pending message event for topic: ${topic}, message: ${message}`,\n            );\n          }\n        }\n      }\n    } catch (error) {\n      this.client.logger.warn(\"processPendingMessageEvents failed\", error);\n    }\n  }\n\n  // ---------- Public ------------------------------------------------ //\n\n  public connect: IEngine[\"connect\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    const connectParams = {\n      ...params,\n      requiredNamespaces: params.requiredNamespaces || {},\n      optionalNamespaces: params.optionalNamespaces || {},\n    };\n    await this.isValidConnect(connectParams);\n\n    // requiredNamespaces are deprecated, assign them to optionalNamespaces\n    connectParams.optionalNamespaces = mergeRequiredAndOptionalNamespaces(\n      connectParams.requiredNamespaces,\n      connectParams.optionalNamespaces,\n    );\n\n    connectParams.requiredNamespaces = {};\n\n    const {\n      pairingTopic,\n      requiredNamespaces,\n      optionalNamespaces,\n      sessionProperties,\n      scopedProperties,\n      relays,\n    } = connectParams;\n    let topic = pairingTopic;\n    let uri: string | undefined;\n    let active = false;\n    try {\n      if (topic) {\n        const pairing = this.client.core.pairing.pairings.get(topic);\n        this.client.logger.warn(\n          \"connect() with existing pairing topic is deprecated and will be removed in the next major release.\",\n        );\n        active = pairing.active;\n      }\n    } catch (error) {\n      this.client.logger.error(`connect() -> pairing.get(${topic}) failed`);\n      throw error;\n    }\n    if (!topic || !active) {\n      const { topic: newTopic, uri: newUri } = await this.client.core.pairing.create({\n        internal: { skipSubscribe: true },\n      });\n      topic = newTopic;\n      uri = newUri;\n    }\n    // safety check to ensure pairing topic is available\n    if (!topic) {\n      const { message } = getInternalError(\"NO_MATCHING_KEY\", `connect() pairing topic: ${topic}`);\n      throw new Error(message);\n    }\n\n    const publicKey = await this.client.core.crypto.generateKeyPair();\n\n    const expiry = ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl || FIVE_MINUTES;\n    const expiryTimestamp = calcExpiry(expiry);\n    const proposal = {\n      requiredNamespaces,\n      optionalNamespaces,\n      relays: relays ?? [{ protocol: RELAYER_DEFAULT_PROTOCOL }],\n      proposer: {\n        publicKey,\n        metadata: this.client.metadata,\n      },\n      expiryTimestamp,\n      pairingTopic: topic,\n      ...(sessionProperties && { sessionProperties }),\n      ...(scopedProperties && { scopedProperties }),\n      id: payloadId(),\n    };\n    const sessionConnectTarget = engineEvent(\"session_connect\", proposal.id);\n\n    const {\n      reject,\n      resolve,\n      done: approval,\n    } = createDelayedPromise<SessionTypes.Struct>(expiry, PROPOSAL_EXPIRY_MESSAGE);\n\n    const proposalExpireHandler = ({ id }: { id: number }) => {\n      if (id === proposal.id) {\n        this.client.events.off(\"proposal_expire\", proposalExpireHandler);\n        this.pendingSessions.delete(proposal.id);\n        // emit the event to trigger reject, this approach automatically cleans up the .once listener below\n        this.events.emit(sessionConnectTarget, {\n          error: { message: PROPOSAL_EXPIRY_MESSAGE, code: 0 },\n        });\n      }\n    };\n\n    this.client.events.on(\"proposal_expire\", proposalExpireHandler);\n    this.events.once<\"session_connect\">(sessionConnectTarget, ({ error, session }) => {\n      this.client.events.off(\"proposal_expire\", proposalExpireHandler);\n      if (error) reject(error);\n      else if (session) {\n        resolve(session);\n      }\n    });\n\n    await this.sendProposeSession({\n      proposal,\n      publishOpts: {\n        internal: {\n          throwOnFailedPublish: true,\n        },\n      },\n    });\n\n    await this.setProposal(proposal.id, proposal);\n    return { uri, approval };\n  };\n\n  public pair: IEngine[\"pair\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      return await this.client.core.pairing.pair(params);\n    } catch (error) {\n      this.client.logger.error(\"pair() failed\");\n      throw error;\n    }\n  };\n\n  public approve: IEngine[\"approve\"] = async (params) => {\n    const configEvent = this.client.core.eventClient.createEvent({\n      properties: {\n        topic: params?.id?.toString(),\n        trace: [EVENT_CLIENT_SESSION_TRACES.session_approve_started],\n      },\n    });\n    try {\n      this.isInitialized();\n      await this.confirmOnlineStateOrThrow();\n    } catch (error) {\n      configEvent.setError(EVENT_CLIENT_SESSION_ERRORS.no_internet_connection);\n      throw error;\n    }\n    try {\n      await this.isValidProposalId(params?.id);\n    } catch (error) {\n      this.client.logger.error(`approve() -> proposal.get(${params?.id}) failed`);\n      configEvent.setError(EVENT_CLIENT_SESSION_ERRORS.proposal_not_found);\n      throw error;\n    }\n\n    try {\n      await this.isValidApprove(params);\n    } catch (error) {\n      this.client.logger.error(\"approve() -> isValidApprove() failed\");\n      configEvent.setError(\n        EVENT_CLIENT_SESSION_ERRORS.session_approve_namespace_validation_failure,\n      );\n      throw error;\n    }\n\n    const { id, relayProtocol, namespaces, sessionProperties, scopedProperties, sessionConfig } =\n      params;\n\n    const proposal = this.client.proposal.get(id);\n\n    this.client.core.eventClient.deleteEvent({ eventId: configEvent.eventId });\n\n    const { pairingTopic, proposer, requiredNamespaces, optionalNamespaces } = proposal;\n\n    let event = this.client.core.eventClient?.getEvent({\n      topic: pairingTopic,\n    }) as EventClientTypes.Event;\n    if (!event) {\n      event = this.client.core.eventClient?.createEvent({\n        type: EVENT_CLIENT_SESSION_TRACES.session_approve_started,\n        properties: {\n          topic: pairingTopic,\n          trace: [\n            EVENT_CLIENT_SESSION_TRACES.session_approve_started,\n            EVENT_CLIENT_SESSION_TRACES.session_namespaces_validation_success,\n          ],\n        },\n      });\n    }\n\n    const selfPublicKey = await this.client.core.crypto.generateKeyPair();\n    const peerPublicKey = proposer.publicKey;\n    const sessionTopic = await this.client.core.crypto.generateSharedKey(\n      selfPublicKey,\n      peerPublicKey,\n    );\n    const sessionSettle = {\n      relay: { protocol: relayProtocol ?? \"irn\" },\n      namespaces,\n      controller: { publicKey: selfPublicKey, metadata: this.client.metadata },\n      expiry: calcExpiry(SESSION_EXPIRY),\n      ...(sessionProperties && { sessionProperties }),\n      ...(scopedProperties && { scopedProperties }),\n      ...(sessionConfig && { sessionConfig }),\n    };\n    const transportType = TRANSPORT_TYPES.relay;\n    event.addTrace(EVENT_CLIENT_SESSION_TRACES.subscribing_session_topic);\n    try {\n      await this.client.core.relayer.subscribe(sessionTopic, {\n        transportType,\n        internal: { skipSubscribe: true },\n      });\n    } catch (error) {\n      event.setError(EVENT_CLIENT_SESSION_ERRORS.subscribe_session_topic_failure);\n      throw error;\n    }\n\n    event.addTrace(EVENT_CLIENT_SESSION_TRACES.subscribe_session_topic_success);\n\n    const session = {\n      ...sessionSettle,\n      topic: sessionTopic,\n      requiredNamespaces,\n      optionalNamespaces,\n      pairingTopic,\n      acknowledged: false,\n      self: sessionSettle.controller,\n      peer: {\n        publicKey: proposer.publicKey,\n        metadata: proposer.metadata,\n      },\n      controller: selfPublicKey,\n      transportType: TRANSPORT_TYPES.relay,\n    };\n    await this.client.session.set(sessionTopic, session);\n\n    event.addTrace(EVENT_CLIENT_SESSION_TRACES.store_session);\n\n    try {\n      await this.sendApproveSession({\n        sessionTopic,\n        proposal,\n        pairingProposalResponse: {\n          relay: {\n            protocol: relayProtocol ?? \"irn\",\n          },\n          responderPublicKey: selfPublicKey,\n        },\n        sessionSettleRequest: sessionSettle,\n        publishOpts: {\n          internal: {\n            throwOnFailedPublish: true,\n          },\n        },\n      });\n\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.session_approve_publish_success);\n    } catch (error) {\n      this.client.logger.error(error);\n      // if the publish fails, delete the session and throw an error\n      this.client.session.delete(sessionTopic, getSdkError(\"USER_DISCONNECTED\"));\n      await this.client.core.relayer.unsubscribe(sessionTopic);\n      throw error;\n    }\n\n    this.client.core.eventClient.deleteEvent({ eventId: event.eventId });\n\n    await this.client.core.pairing.updateMetadata({\n      topic: pairingTopic,\n      metadata: proposer.metadata,\n    });\n    await this.deleteProposal(id);\n    await this.client.core.pairing.activate({ topic: pairingTopic });\n    await this.setExpiry(sessionTopic, calcExpiry(SESSION_EXPIRY));\n    return {\n      topic: sessionTopic,\n      acknowledged: () => Promise.resolve(this.client.session.get(sessionTopic)),\n    };\n  };\n\n  public reject: IEngine[\"reject\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidReject(params);\n    } catch (error) {\n      this.client.logger.error(\"reject() -> isValidReject() failed\");\n      throw error;\n    }\n    const { id, reason } = params;\n    let pairingTopic;\n    try {\n      const proposal = this.client.proposal.get(id);\n      pairingTopic = proposal.pairingTopic;\n    } catch (error) {\n      this.client.logger.error(`reject() -> proposal.get(${id}) failed`);\n      throw error;\n    }\n\n    if (pairingTopic) {\n      await this.sendError({\n        id,\n        topic: pairingTopic,\n        error: reason,\n        rpcOpts: ENGINE_RPC_OPTS.wc_sessionPropose.reject,\n      });\n    }\n\n    await this.deleteProposal(id);\n  };\n\n  public update: IEngine[\"update\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidUpdate(params);\n    } catch (error) {\n      this.client.logger.error(\"update() -> isValidUpdate() failed\");\n      throw error;\n    }\n    const { topic, namespaces } = params;\n\n    const { done: acknowledged, resolve, reject } = createDelayedPromise<void>();\n    const clientRpcId = payloadId();\n    const relayRpcId = getBigIntRpcId().toString() as any;\n\n    const oldNamespaces = this.client.session.get(topic).namespaces;\n    this.events.once(engineEvent(\"session_update\", clientRpcId), ({ error }: any) => {\n      if (error) reject(error);\n      else {\n        resolve();\n      }\n    });\n    // Update the session with the new namespaces, if the publish fails, revert to the old.\n    // This allows the client to use the updated session like emitting events\n    // without waiting for the peer to acknowledge\n    await this.client.session.update(topic, { namespaces });\n    await this.sendRequest({\n      topic,\n      method: \"wc_sessionUpdate\",\n      params: { namespaces },\n      throwOnFailedPublish: true,\n      clientRpcId,\n      relayRpcId,\n    }).catch((error) => {\n      this.client.logger.error(error);\n      this.client.session.update(topic, { namespaces: oldNamespaces });\n      reject(error);\n    });\n    return { acknowledged };\n  };\n\n  public extend: IEngine[\"extend\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidExtend(params);\n    } catch (error) {\n      this.client.logger.error(\"extend() -> isValidExtend() failed\");\n      throw error;\n    }\n\n    const { topic } = params;\n    const clientRpcId = payloadId();\n    const { done: acknowledged, resolve, reject } = createDelayedPromise<void>();\n    this.events.once(engineEvent(\"session_extend\", clientRpcId), ({ error }: any) => {\n      if (error) reject(error);\n      else resolve();\n    });\n\n    await this.setExpiry(topic, calcExpiry(SESSION_EXPIRY));\n    this.sendRequest({\n      topic,\n      method: \"wc_sessionExtend\",\n      params: {},\n      clientRpcId,\n      throwOnFailedPublish: true,\n    }).catch((e) => {\n      reject(e);\n    });\n\n    return { acknowledged };\n  };\n\n  public request: IEngine[\"request\"] = async <T>(params: EngineTypes.RequestParams) => {\n    this.isInitialized();\n    try {\n      await this.isValidRequest(params);\n    } catch (error) {\n      this.client.logger.error(\"request() -> isValidRequest() failed\");\n      throw error;\n    }\n    const { chainId, request, topic, expiry = ENGINE_RPC_OPTS.wc_sessionRequest.req.ttl } = params;\n    const session = this.client.session.get(topic);\n\n    if (session?.transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n    const clientRpcId = payloadId();\n    const relayRpcId = getBigIntRpcId().toString() as any;\n    const { done, resolve, reject } = createDelayedPromise<T>(\n      expiry,\n      \"Request expired. Please try again.\",\n    );\n    this.events.once<\"session_request\">(\n      engineEvent(\"session_request\", clientRpcId),\n      ({ error, result }) => {\n        if (error) reject(error);\n        else resolve(result);\n      },\n    );\n    const protocolMethod = \"wc_sessionRequest\";\n    const appLink = this.getAppLinkIfEnabled(session.peer.metadata, session.transportType);\n    if (appLink) {\n      await this.sendRequest({\n        clientRpcId,\n        relayRpcId,\n        topic,\n        method: protocolMethod,\n        params: {\n          request: {\n            ...request,\n            expiryTimestamp: calcExpiry(expiry),\n          },\n          chainId,\n        },\n        expiry,\n        throwOnFailedPublish: true,\n        appLink,\n      }).catch((error) => reject(error));\n\n      this.client.events.emit(\"session_request_sent\", {\n        topic,\n        request,\n        chainId,\n        id: clientRpcId,\n      });\n      const result = await done();\n      return result;\n    }\n\n    const protocolRequestParams: JsonRpcTypes.RequestParams[\"wc_sessionRequest\"] = {\n      request: {\n        ...request,\n        expiryTimestamp: calcExpiry(expiry),\n      },\n      chainId,\n    };\n\n    return await Promise.all([\n      new Promise<void>(async (resolve) => {\n        await this.sendRequest({\n          clientRpcId,\n          relayRpcId,\n          topic,\n          method: protocolMethod,\n          params: protocolRequestParams,\n          expiry,\n          throwOnFailedPublish: true,\n          tvf: this.getTVFParams(clientRpcId, protocolRequestParams),\n        }).catch((error) => reject(error));\n        this.client.events.emit(\"session_request_sent\", {\n          topic,\n          request,\n          chainId,\n          id: clientRpcId,\n        });\n        resolve();\n      }),\n      new Promise<void>(async (resolve) => {\n        // only attempt to handle deeplinks if they are not explicitly disabled in the session config\n        if (!session.sessionConfig?.disableDeepLink) {\n          const wcDeepLink = (await getDeepLink(\n            this.client.core.storage,\n            WALLETCONNECT_DEEPLINK_CHOICE,\n          )) as string;\n          await handleDeeplinkRedirect({ id: clientRpcId, topic, wcDeepLink });\n        }\n        resolve();\n      }),\n      done(),\n    ]).then((result) => result[2]); // order is important here, we want to return the result of the `done` promise\n  };\n\n  public respond: IEngine[\"respond\"] = async (params) => {\n    this.isInitialized();\n    await this.isValidRespond(params);\n    const { topic, response } = params;\n    const { id } = response;\n    const session = this.client.session.get(topic);\n\n    if (session.transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const appLink = this.getAppLinkIfEnabled(session.peer.metadata, session.transportType);\n    if (isJsonRpcResult(response)) {\n      await this.sendResult({\n        id,\n        topic,\n        result: response.result,\n        throwOnFailedPublish: true,\n        appLink,\n      });\n    } else if (isJsonRpcError(response)) {\n      await this.sendError({ id, topic, error: response.error, appLink });\n    }\n    this.cleanupAfterResponse(params);\n  };\n\n  public ping: IEngine[\"ping\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidPing(params);\n    } catch (error) {\n      this.client.logger.error(\"ping() -> isValidPing() failed\");\n      throw error;\n    }\n    const { topic } = params;\n    if (this.client.session.keys.includes(topic)) {\n      const clientRpcId = payloadId();\n      const relayRpcId = getBigIntRpcId().toString() as any;\n      const { done, resolve, reject } = createDelayedPromise<void>();\n      this.events.once(engineEvent(\"session_ping\", clientRpcId), ({ error }: any) => {\n        if (error) reject(error);\n        else resolve();\n      });\n      await Promise.all([\n        this.sendRequest({\n          topic,\n          method: \"wc_sessionPing\",\n          params: {},\n          throwOnFailedPublish: true,\n          clientRpcId,\n          relayRpcId,\n        }),\n        done(),\n      ]);\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      this.client.logger.warn(\n        \"ping() on pairing topic is deprecated and will be removed in the next major release.\",\n      );\n      await this.client.core.pairing.ping({ topic });\n    }\n  };\n\n  public emit: IEngine[\"emit\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    await this.isValidEmit(params);\n    const { topic, event, chainId } = params;\n    const relayRpcId = getBigIntRpcId().toString() as any;\n    const clientRpcId = payloadId();\n    await this.sendRequest({\n      topic,\n      method: \"wc_sessionEvent\",\n      params: { event, chainId },\n      throwOnFailedPublish: true,\n      relayRpcId,\n      clientRpcId,\n    });\n  };\n\n  public disconnect: IEngine[\"disconnect\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    await this.isValidDisconnect(params);\n    const { topic } = params;\n    if (this.client.session.keys.includes(topic)) {\n      // await an ack to ensure the relay has received the disconnect request\n      await this.sendRequest({\n        topic,\n        method: \"wc_sessionDelete\",\n        params: getSdkError(\"USER_DISCONNECTED\"),\n        throwOnFailedPublish: true,\n      });\n      await this.deleteSession({ topic, emitEvent: false });\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      await this.client.core.pairing.disconnect({ topic });\n    } else {\n      const { message } = getInternalError(\n        \"MISMATCHED_TOPIC\",\n        `Session or pairing topic not found: ${topic}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  public find: IEngine[\"find\"] = (params) => {\n    this.isInitialized();\n    return this.client.session.getAll().filter((session) => isSessionCompatible(session, params));\n  };\n\n  public getPendingSessionRequests: IEngine[\"getPendingSessionRequests\"] = () => {\n    return this.client.pendingRequest.getAll();\n  };\n\n  // ---------- Auth ------------------------------------------------ //\n\n  public authenticate: IEngine[\"authenticate\"] = async (params, walletUniversalLink) => {\n    this.isInitialized();\n    this.isValidAuthenticate(params);\n\n    const isLinkMode =\n      walletUniversalLink &&\n      this.client.core.linkModeSupportedApps.includes(walletUniversalLink) &&\n      this.client.metadata.redirect?.linkMode;\n\n    const transportType: RelayerTypes.TransportType = isLinkMode\n      ? TRANSPORT_TYPES.link_mode\n      : TRANSPORT_TYPES.relay;\n\n    if (transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const {\n      chains,\n      statement = \"\",\n      uri,\n      domain,\n      nonce,\n      type,\n      exp,\n      nbf,\n      methods = [],\n      expiry,\n    } = params;\n    // reassign resources to remove reference as the array is modified and might cause side effects\n    const resources = [...(params.resources || [])];\n\n    const { topic: pairingTopic, uri: connectionUri } = await this.client.core.pairing.create({\n      methods: [\"wc_sessionAuthenticate\"],\n      transportType,\n    });\n\n    this.client.logger.info({\n      message: \"Generated new pairing\",\n      pairing: { topic: pairingTopic, uri: connectionUri },\n    });\n\n    const publicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(publicKey);\n\n    await Promise.all([\n      this.client.auth.authKeys.set(AUTH_PUBLIC_KEY_NAME, { responseTopic, publicKey }),\n      this.client.auth.pairingTopics.set(responseTopic, { topic: responseTopic, pairingTopic }),\n    ]);\n\n    // Subscribe to response topic\n    await this.client.core.relayer.subscribe(responseTopic, { transportType });\n\n    this.client.logger.info(`sending request to new pairing topic: ${pairingTopic}`);\n\n    if (methods.length > 0) {\n      const { namespace } = parseChainId(chains[0]);\n      let recap = createEncodedRecap(namespace, \"request\", methods);\n      const existingRecap = getRecapFromResources(resources);\n      if (existingRecap) {\n        // per Recaps spec, recap must occupy the last position in the resources array\n        // using .pop to remove the element given we already checked it's a recap and will replace it\n        const mergedRecap = mergeEncodedRecaps(recap, resources.pop() as string);\n        recap = mergedRecap;\n      }\n      resources.push(recap);\n    }\n\n    // Ensure the expiry is greater than the minimum required for the request - currently 1h\n    const authRequestExpiry =\n      expiry && expiry > ENGINE_RPC_OPTS.wc_sessionAuthenticate.req.ttl\n        ? expiry\n        : ENGINE_RPC_OPTS.wc_sessionAuthenticate.req.ttl;\n\n    const request: AuthTypes.SessionAuthenticateRequestParams = {\n      authPayload: {\n        type: type ?? \"caip122\",\n        chains,\n        statement,\n        aud: uri,\n        domain,\n        version: \"1\",\n        nonce,\n        iat: new Date().toISOString(),\n        exp,\n        nbf,\n        resources,\n      },\n      requester: { publicKey, metadata: this.client.metadata },\n      expiryTimestamp: calcExpiry(authRequestExpiry),\n    };\n\n    // ----- build namespaces for fallback session proposal ----- //\n    const namespaces = {\n      eip155: {\n        chains,\n        // request `personal_sign` method by default to allow for fallback siwe\n        methods: [...new Set([\"personal_sign\", ...methods])],\n        events: [\"chainChanged\", \"accountsChanged\"],\n      },\n    };\n\n    const proposal = {\n      requiredNamespaces: {},\n      optionalNamespaces: namespaces,\n      relays: [{ protocol: \"irn\" }],\n      pairingTopic,\n      proposer: {\n        publicKey,\n        metadata: this.client.metadata,\n      },\n      expiryTimestamp: calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl),\n      id: payloadId(),\n    };\n\n    const { done, resolve, reject } = createDelayedPromise(authRequestExpiry, \"Request expired\");\n\n    const authenticateId = payloadId();\n    const sessionConnectEventTarget = engineEvent(\"session_connect\", proposal.id);\n    const authenticateEventTarget = engineEvent(\"session_request\", authenticateId);\n\n    // handle fallback session proposal response\n    const onSessionConnect = async ({ error, session }: any) => {\n      // cleanup listener for authenticate response\n      this.events.off(authenticateEventTarget, onAuthenticate);\n      if (error) reject(error);\n      else if (session) {\n        resolve({\n          session,\n        });\n      }\n    };\n    // handle session authenticate response\n    const onAuthenticate = async (payload: any) => {\n      // delete this auth request on response\n      // we're using payload from the wallet to establish the session so we don't need to keep this around\n      await this.deletePendingAuthRequest(authenticateId, { message: \"fulfilled\", code: 0 });\n      if (payload.error) {\n        // wallets that do not support wc_sessionAuthenticate will return an error\n        // we should not reject the promise in this case as the fallback session proposal will be used\n        const error = getSdkError(\"WC_METHOD_UNSUPPORTED\", \"wc_sessionAuthenticate\");\n        if (payload.error.code === error.code) return;\n\n        // cleanup listener for fallback response\n        this.events.off(sessionConnectEventTarget, onSessionConnect);\n        return reject(payload.error.message);\n      }\n      // delete fallback proposal on successful authenticate as the proposal will not be responded to\n      await this.deleteProposal(proposal.id);\n      // cleanup listener for fallback response\n      this.events.off(sessionConnectEventTarget, onSessionConnect);\n\n      const {\n        cacaos,\n        responder,\n      }: {\n        cacaos: AuthTypes.SessionAuthenticateResponseParams[\"cacaos\"];\n        responder: AuthTypes.SessionAuthenticateResponseParams[\"responder\"];\n      } = payload.result;\n\n      const approvedMethods: string[] = [];\n      const approvedAccounts: string[] = [];\n      for (const cacao of cacaos) {\n        const isValid = await validateSignedCacao({ cacao, projectId: this.client.core.projectId });\n        if (!isValid) {\n          this.client.logger.error(cacao, \"Signature verification failed\");\n          reject(getSdkError(\"SESSION_SETTLEMENT_FAILED\", \"Signature verification failed\"));\n        }\n\n        const { p: payload } = cacao;\n        const recap = getRecapFromResources(payload.resources);\n\n        const approvedChains: string[] = [getNamespacedDidChainId(payload.iss) as string];\n        const parsedAddress = getDidAddress(payload.iss) as string;\n\n        if (recap) {\n          const methodsfromRecap = getMethodsFromRecap(recap);\n          const chainsFromRecap = getChainsFromRecap(recap);\n          approvedMethods.push(...methodsfromRecap);\n          approvedChains.push(...chainsFromRecap);\n        }\n\n        for (const chain of approvedChains) {\n          approvedAccounts.push(`${chain}:${parsedAddress}`);\n        }\n      }\n      const sessionTopic = await this.client.core.crypto.generateSharedKey(\n        publicKey,\n        responder.publicKey,\n      );\n\n      //create session object\n      let session: SessionTypes.Struct | undefined;\n\n      if (approvedMethods.length > 0) {\n        session = {\n          topic: sessionTopic,\n          acknowledged: true,\n          self: {\n            publicKey,\n            metadata: this.client.metadata,\n          },\n          peer: responder,\n          controller: responder.publicKey,\n          expiry: calcExpiry(SESSION_EXPIRY),\n          requiredNamespaces: {},\n          optionalNamespaces: {},\n          relay: { protocol: \"irn\" },\n          pairingTopic,\n          namespaces: buildNamespacesFromAuth(\n            [...new Set(approvedMethods)],\n            [...new Set(approvedAccounts)],\n          ),\n          transportType,\n        };\n\n        await this.client.core.relayer.subscribe(sessionTopic, { transportType });\n        await this.client.session.set(sessionTopic, session);\n        if (pairingTopic) {\n          await this.client.core.pairing.updateMetadata({\n            topic: pairingTopic,\n            metadata: responder.metadata,\n          });\n        }\n\n        session = this.client.session.get(sessionTopic);\n      }\n\n      if (\n        this.client.metadata.redirect?.linkMode &&\n        responder.metadata.redirect?.linkMode &&\n        responder.metadata.redirect?.universal &&\n        walletUniversalLink\n      ) {\n        // save wallet link in array of apps that support linkMode\n        this.client.core.addLinkModeSupportedApp(responder.metadata.redirect.universal);\n\n        this.client.session.update(sessionTopic, {\n          transportType: TRANSPORT_TYPES.link_mode,\n        });\n      }\n\n      resolve({\n        auths: cacaos,\n        session,\n      });\n    };\n\n    // subscribe to response events\n    this.events.once<\"session_connect\">(sessionConnectEventTarget, onSessionConnect);\n    this.events.once(authenticateEventTarget, onAuthenticate);\n\n    let linkModeURL;\n    try {\n      if (isLinkMode) {\n        const payload = formatJsonRpcRequest(\"wc_sessionAuthenticate\", request, authenticateId);\n        this.client.core.history.set(pairingTopic, payload);\n        const message = await this.client.core.crypto.encode(\"\", payload, {\n          type: TYPE_2,\n          encoding: BASE64URL,\n        });\n        linkModeURL = getLinkModeURL(walletUniversalLink, pairingTopic, message);\n      } else {\n        // send both (main & fallback) requests\n        await Promise.all([\n          this.sendRequest({\n            topic: pairingTopic,\n            method: \"wc_sessionAuthenticate\",\n            params: request,\n            expiry: params.expiry,\n            throwOnFailedPublish: true,\n            clientRpcId: authenticateId,\n          }),\n          this.sendRequest({\n            topic: pairingTopic,\n            method: \"wc_sessionPropose\",\n            params: proposal,\n            expiry: ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl,\n            throwOnFailedPublish: true,\n            clientRpcId: proposal.id,\n          }),\n        ]);\n      }\n    } catch (error) {\n      // cleanup listeners on failed publish\n      this.events.off(sessionConnectEventTarget, onSessionConnect);\n      this.events.off(authenticateEventTarget, onAuthenticate);\n      throw error;\n    }\n\n    await this.setProposal(proposal.id, proposal);\n    await this.setAuthRequest(authenticateId, {\n      request: {\n        ...request,\n        verifyContext: {} as any,\n      },\n      pairingTopic,\n      transportType,\n    });\n\n    return {\n      uri: linkModeURL ?? connectionUri,\n      response: done,\n    } as EngineTypes.SessionAuthenticateResponsePromise;\n  };\n\n  public approveSessionAuthenticate: IEngine[\"approveSessionAuthenticate\"] = async (\n    sessionAuthenticateResponseParams,\n  ) => {\n    const { id, auths } = sessionAuthenticateResponseParams;\n\n    const event = this.client.core.eventClient.createEvent({\n      properties: {\n        topic: id.toString(),\n        trace: [EVENT_CLIENT_AUTHENTICATE_TRACES.authenticated_session_approve_started],\n      },\n    });\n\n    try {\n      this.isInitialized();\n    } catch (error) {\n      event.setError(EVENT_CLIENT_AUTHENTICATE_ERRORS.no_internet_connection);\n      throw error;\n    }\n\n    const pendingRequest = this.getPendingAuthRequest(id);\n\n    if (!pendingRequest) {\n      event.setError(\n        EVENT_CLIENT_AUTHENTICATE_ERRORS.authenticated_session_pending_request_not_found,\n      );\n      throw new Error(`Could not find pending auth request with id ${id}`);\n    }\n\n    const transportType = pendingRequest.transportType || TRANSPORT_TYPES.relay;\n    if (transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const receiverPublicKey = pendingRequest.requester.publicKey;\n    const senderPublicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(receiverPublicKey);\n\n    const encodeOpts = {\n      type: TYPE_1,\n      receiverPublicKey,\n      senderPublicKey,\n    };\n\n    const approvedMethods: string[] = [];\n    const approvedAccounts: string[] = [];\n    for (const cacao of auths) {\n      const isValid = await validateSignedCacao({ cacao, projectId: this.client.core.projectId });\n      if (!isValid) {\n        event.setError(EVENT_CLIENT_AUTHENTICATE_ERRORS.invalid_cacao);\n\n        const invalidErr = getSdkError(\n          \"SESSION_SETTLEMENT_FAILED\",\n          \"Signature verification failed\",\n        );\n\n        await this.sendError({\n          id,\n          topic: responseTopic,\n          error: invalidErr,\n          encodeOpts,\n        });\n\n        throw new Error(invalidErr.message);\n      }\n\n      event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.cacaos_verified);\n\n      const { p: payload } = cacao;\n      const recap = getRecapFromResources(payload.resources);\n\n      const approvedChains: string[] = [getNamespacedDidChainId(payload.iss) as string];\n\n      const parsedAddress = getDidAddress(payload.iss) as string;\n\n      if (recap) {\n        const methodsfromRecap = getMethodsFromRecap(recap);\n        const chainsFromRecap = getChainsFromRecap(recap);\n        approvedMethods.push(...methodsfromRecap);\n        approvedChains.push(...chainsFromRecap);\n      }\n      for (const chain of approvedChains) {\n        approvedAccounts.push(`${chain}:${parsedAddress}`);\n      }\n    }\n\n    const sessionTopic = await this.client.core.crypto.generateSharedKey(\n      senderPublicKey,\n      receiverPublicKey,\n    );\n\n    event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.create_authenticated_session_topic);\n\n    let session: SessionTypes.Struct | undefined;\n    if (approvedMethods?.length > 0) {\n      session = {\n        topic: sessionTopic,\n        acknowledged: true,\n        self: {\n          publicKey: senderPublicKey,\n          metadata: this.client.metadata,\n        },\n        peer: {\n          publicKey: receiverPublicKey,\n          metadata: pendingRequest.requester.metadata,\n        },\n        controller: receiverPublicKey,\n        expiry: calcExpiry(SESSION_EXPIRY),\n        authentication: auths,\n        requiredNamespaces: {},\n        optionalNamespaces: {},\n        relay: { protocol: \"irn\" },\n        pairingTopic: pendingRequest.pairingTopic,\n        namespaces: buildNamespacesFromAuth(\n          [...new Set(approvedMethods)],\n          [...new Set(approvedAccounts)],\n        ),\n        transportType,\n      };\n\n      event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.subscribing_authenticated_session_topic);\n\n      try {\n        await this.client.core.relayer.subscribe(sessionTopic, { transportType });\n      } catch (error) {\n        event.setError(\n          EVENT_CLIENT_AUTHENTICATE_ERRORS.subscribe_authenticated_session_topic_failure,\n        );\n        throw error;\n      }\n\n      event.addTrace(\n        EVENT_CLIENT_AUTHENTICATE_TRACES.subscribe_authenticated_session_topic_success,\n      );\n\n      await this.client.session.set(sessionTopic, session);\n\n      event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.store_authenticated_session);\n\n      await this.client.core.pairing.updateMetadata({\n        topic: pendingRequest.pairingTopic,\n        metadata: pendingRequest.requester.metadata,\n      });\n    }\n\n    event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.publishing_authenticated_session_approve);\n\n    try {\n      await this.sendResult<\"wc_sessionAuthenticate\">({\n        topic: responseTopic,\n        id,\n        result: {\n          cacaos: auths,\n          responder: {\n            publicKey: senderPublicKey,\n            metadata: this.client.metadata,\n          },\n        },\n        encodeOpts,\n        throwOnFailedPublish: true,\n        appLink: this.getAppLinkIfEnabled(pendingRequest.requester.metadata, transportType),\n      });\n    } catch (error) {\n      event.setError(\n        EVENT_CLIENT_AUTHENTICATE_ERRORS.authenticated_session_approve_publish_failure,\n      );\n      throw error;\n    }\n\n    await this.client.auth.requests.delete(id, { message: \"fulfilled\", code: 0 });\n    await this.client.core.pairing.activate({ topic: pendingRequest.pairingTopic });\n    this.client.core.eventClient.deleteEvent({ eventId: event.eventId });\n\n    return { session };\n  };\n\n  public rejectSessionAuthenticate: IEngine[\"rejectSessionAuthenticate\"] = async (params) => {\n    this.isInitialized();\n\n    const { id, reason } = params;\n\n    const pendingRequest = this.getPendingAuthRequest(id);\n\n    if (!pendingRequest) {\n      throw new Error(`Could not find pending auth request with id ${id}`);\n    }\n\n    if (pendingRequest.transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const receiverPublicKey = pendingRequest.requester.publicKey;\n    const senderPublicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(receiverPublicKey);\n\n    const encodeOpts = {\n      type: TYPE_1,\n      receiverPublicKey,\n      senderPublicKey,\n    };\n\n    await this.sendError({\n      id,\n      topic: responseTopic,\n      error: reason,\n      encodeOpts,\n      rpcOpts: ENGINE_RPC_OPTS.wc_sessionAuthenticate.reject,\n      appLink: this.getAppLinkIfEnabled(\n        pendingRequest.requester.metadata,\n        pendingRequest.transportType,\n      ),\n    });\n    await this.client.auth.requests.delete(id, { message: \"rejected\", code: 0 });\n    await this.deleteProposal(id);\n  };\n\n  public formatAuthMessage: IEngine[\"formatAuthMessage\"] = (params) => {\n    this.isInitialized();\n    const { request, iss } = params;\n    return formatMessage(request, iss);\n  };\n\n  /**\n   * no longer used as the client initializes instantly without waiting to connect+subscribe\n   * @deprecated\n   */\n  public processRelayMessageCache: IEngine[\"processRelayMessageCache\"] = () => {\n    // process the relay messages cache in the next tick to allow event listeners to be registered by the implementing app\n    setTimeout(async () => {\n      if (this.relayMessageCache.length === 0) return;\n      while (this.relayMessageCache.length > 0) {\n        try {\n          const message = this.relayMessageCache.shift();\n          if (message) {\n            await this.onRelayMessage(message);\n          }\n        } catch (error) {\n          this.client.logger.error(error);\n        }\n      }\n    }, 50);\n  };\n\n  // ---------- Private Helpers --------------------------------------- //\n\n  private cleanupDuplicatePairings: EnginePrivate[\"cleanupDuplicatePairings\"] = async (\n    session: SessionTypes.Struct,\n  ) => {\n    // older SDK versions are missing the `pairingTopic` prop thus we need to check for it\n    if (!session.pairingTopic) return;\n\n    try {\n      const pairing = this.client.core.pairing.pairings.get(session.pairingTopic);\n      const allPairings = this.client.core.pairing.pairings.getAll();\n      const duplicates = allPairings.filter(\n        (p) =>\n          p.peerMetadata?.url &&\n          p.peerMetadata?.url === session.peer.metadata.url &&\n          p.topic &&\n          p.topic !== pairing.topic,\n      );\n      if (duplicates.length === 0) return;\n      this.client.logger.info(`Cleaning up ${duplicates.length} duplicate pairing(s)`);\n      await Promise.all(\n        duplicates.map((p) => this.client.core.pairing.disconnect({ topic: p.topic })),\n      );\n      this.client.logger.info(`Duplicate pairings clean up finished`);\n    } catch (error) {\n      this.client.logger.error(error);\n    }\n  };\n\n  private deleteSession: EnginePrivate[\"deleteSession\"] = async (params) => {\n    const { topic, expirerHasDeleted = false, emitEvent = true, id = 0 } = params;\n    const { self } = this.client.session.get(topic);\n    // Await the unsubscribe first to avoid deleting the symKey too early below.\n    await this.client.core.relayer.unsubscribe(topic);\n    await this.client.session.delete(topic, getSdkError(\"USER_DISCONNECTED\"));\n    this.addToRecentlyDeleted(topic, \"session\");\n    if (this.client.core.crypto.keychain.has(self.publicKey)) {\n      await this.client.core.crypto.deleteKeyPair(self.publicKey);\n    }\n    if (this.client.core.crypto.keychain.has(topic)) {\n      await this.client.core.crypto.deleteSymKey(topic);\n    }\n    if (!expirerHasDeleted) this.client.core.expirer.del(topic);\n    // remove any deeplinks from storage after the session is deleted\n    // to avoid navigating to incorrect deeplink later on\n    this.client.core.storage\n      .removeItem(WALLETCONNECT_DEEPLINK_CHOICE)\n      .catch((e) => this.client.logger.warn(e));\n    this.getPendingSessionRequests().forEach((r) => {\n      if (r.topic === topic) {\n        this.deletePendingSessionRequest(r.id, getSdkError(\"USER_DISCONNECTED\"));\n      }\n    });\n    // reset the queue state back to idle if a request for the deleted session is still in the queue\n    if (topic === this.sessionRequestQueue.queue[0]?.topic) {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n    }\n    if (emitEvent) this.client.events.emit(\"session_delete\", { id, topic });\n  };\n\n  private deleteProposal: EnginePrivate[\"deleteProposal\"] = async (id, expirerHasDeleted) => {\n    if (expirerHasDeleted) {\n      try {\n        const proposal = this.client.proposal.get(id);\n        const event = this.client.core.eventClient.getEvent({ topic: proposal.pairingTopic });\n        event?.setError(EVENT_CLIENT_SESSION_ERRORS.proposal_expired);\n      } catch (error) {}\n    }\n    await Promise.all([\n      this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\")),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n    this.addToRecentlyDeleted(id, \"proposal\");\n  };\n\n  private deletePendingSessionRequest: EnginePrivate[\"deletePendingSessionRequest\"] = async (\n    id,\n    reason,\n    expirerHasDeleted = false,\n  ) => {\n    await Promise.all([\n      this.client.pendingRequest.delete(id, reason),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n    this.addToRecentlyDeleted(id, \"request\");\n    this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((r) => r.id !== id);\n    if (expirerHasDeleted) {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n      this.client.events.emit(\"session_request_expire\", { id });\n    }\n  };\n\n  private deletePendingAuthRequest: EnginePrivate[\"deletePendingAuthRequest\"] = async (\n    id,\n    reason,\n    expirerHasDeleted = false,\n  ) => {\n    await Promise.all([\n      this.client.auth.requests.delete(id, reason),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n  };\n\n  private setExpiry: EnginePrivate[\"setExpiry\"] = async (topic, expiry) => {\n    if (!this.client.session.keys.includes(topic)) return;\n    this.client.core.expirer.set(topic, expiry);\n    await this.client.session.update(topic, { expiry });\n  };\n\n  private setProposal: EnginePrivate[\"setProposal\"] = async (id, proposal) => {\n    this.client.core.expirer.set(id, calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl));\n    await this.client.proposal.set(id, proposal);\n  };\n\n  private setAuthRequest: EnginePrivate[\"setAuthRequest\"] = async (id, params) => {\n    const { request, pairingTopic, transportType = TRANSPORT_TYPES.relay } = params;\n    this.client.core.expirer.set(id, request.expiryTimestamp);\n    await this.client.auth.requests.set(id, {\n      authPayload: request.authPayload,\n      requester: request.requester,\n      expiryTimestamp: request.expiryTimestamp,\n      id,\n      pairingTopic,\n      verifyContext: request.verifyContext,\n      transportType,\n    });\n  };\n\n  private setPendingSessionRequest: EnginePrivate[\"setPendingSessionRequest\"] = async (\n    pendingRequest: PendingRequestTypes.Struct,\n  ) => {\n    const { id, topic, params, verifyContext } = pendingRequest;\n    const expiry =\n      params.request.expiryTimestamp || calcExpiry(ENGINE_RPC_OPTS.wc_sessionRequest.req.ttl);\n    this.client.core.expirer.set(id, expiry);\n    await this.client.pendingRequest.set(id, {\n      id,\n      topic,\n      params,\n      verifyContext,\n    });\n  };\n\n  private sendRequest: EnginePrivate[\"sendRequest\"] = async (args) => {\n    const {\n      topic,\n      method,\n      params,\n      expiry,\n      relayRpcId,\n      clientRpcId,\n      throwOnFailedPublish,\n      appLink,\n      tvf,\n      publishOpts = {},\n    } = args;\n    const payload = formatJsonRpcRequest(method, params, clientRpcId);\n\n    let message: string;\n    const isLinkMode = !!appLink;\n\n    try {\n      const encoding = isLinkMode ? BASE64URL : BASE64;\n      message = await this.client.core.crypto.encode(topic, payload, { encoding });\n    } catch (error) {\n      await this.cleanup();\n      this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n\n    let attestation: string | undefined;\n    if (METHODS_TO_VERIFY.includes(method)) {\n      const decryptedId = hashMessage(JSON.stringify(payload));\n      const id = hashMessage(message);\n      attestation = await this.client.core.verify.register({ id, decryptedId });\n    }\n\n    const opts = {\n      ...ENGINE_RPC_OPTS[method].req,\n      ...publishOpts,\n    };\n\n    opts.attestation = attestation;\n    if (expiry) opts.ttl = expiry;\n    if (relayRpcId) opts.id = relayRpcId;\n    this.client.core.history.set(topic, payload);\n\n    if (isLinkMode) {\n      const redirectURL = getLinkModeURL(appLink, topic, message);\n      await (global as any).Linking.openURL(redirectURL, this.client.name);\n    } else {\n      opts.tvf = {\n        ...tvf,\n        correlationId: payload.id,\n      };\n\n      if (throwOnFailedPublish) {\n        opts.internal = {\n          ...opts.internal,\n          throwOnFailedPublish: true,\n        };\n        await this.client.core.relayer.publish(topic, message, opts);\n      } else {\n        this.client.core.relayer\n          .publish(topic, message, opts)\n          .catch((error) => this.client.logger.error(error));\n      }\n    }\n\n    return payload.id;\n  };\n\n  private sendProposeSession: EnginePrivate[\"sendProposeSession\"] = async (params) => {\n    const { proposal, publishOpts } = params;\n\n    const proposeSessionPayload = formatJsonRpcRequest(\"wc_sessionPropose\", proposal, proposal.id);\n\n    this.client.core.history.set(proposal.pairingTopic, proposeSessionPayload);\n\n    const proposeSessionMessage = await this.client.core.crypto.encode(\n      proposal.pairingTopic,\n      proposeSessionPayload,\n      {\n        encoding: BASE64,\n      },\n    );\n\n    const decryptedId = hashMessage(JSON.stringify(proposeSessionPayload));\n    const attestationId = hashMessage(proposeSessionMessage);\n    const attestation = await this.client.core.verify.register({ id: attestationId, decryptedId });\n\n    await this.client.core.relayer.publishCustom({\n      payload: {\n        pairingTopic: proposal.pairingTopic,\n        sessionProposal: proposeSessionMessage,\n      },\n      opts: {\n        ...publishOpts,\n        id: proposal.id,\n        publishMethod: \"wc_proposeSession\",\n        attestation,\n      },\n    });\n  };\n\n  private sendApproveSession: EnginePrivate[\"sendApproveSession\"] = async (params) => {\n    const { sessionTopic, pairingProposalResponse, proposal, sessionSettleRequest, publishOpts } =\n      params;\n    const pairingPayload = formatJsonRpcResult(proposal.id, pairingProposalResponse);\n\n    const pairingResponseMessage = await this.client.core.crypto.encode(\n      proposal.pairingTopic,\n      pairingPayload,\n      {\n        encoding: BASE64,\n      },\n    );\n\n    const sessionSettlePayload = formatJsonRpcRequest(\n      \"wc_sessionSettle\",\n      sessionSettleRequest,\n      publishOpts?.id,\n    );\n\n    const sessionSettlementRequestMessage = await this.client.core.crypto.encode(\n      sessionTopic,\n      sessionSettlePayload,\n      {\n        encoding: BASE64,\n      },\n    );\n\n    this.client.core.history.set(sessionTopic, sessionSettlePayload);\n\n    await this.client.core.relayer.publishCustom({\n      payload: {\n        sessionTopic,\n        pairingTopic: proposal.pairingTopic,\n        sessionProposalResponse: pairingResponseMessage,\n        sessionSettlementRequest: sessionSettlementRequestMessage,\n      },\n      opts: {\n        ...publishOpts,\n        publishMethod: \"wc_approveSession\",\n      },\n    });\n  };\n\n  private sendResult: EnginePrivate[\"sendResult\"] = async (args) => {\n    const { id, topic, result, throwOnFailedPublish, encodeOpts, appLink } = args;\n    const payload = formatJsonRpcResult(id, result);\n    let message;\n    const isLinkMode = appLink && typeof (global as any)?.Linking !== \"undefined\";\n\n    try {\n      const encoding = isLinkMode ? BASE64URL : BASE64;\n      message = await this.client.core.crypto.encode(topic, payload, {\n        ...(encodeOpts || {}),\n        encoding,\n      });\n    } catch (error) {\n      // if encoding fails e.g. due to missing keychain, we want to cleanup all related data as its unusable\n      await this.cleanup();\n      this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n    let record;\n    let tvf;\n    try {\n      record = await this.client.core.history.get(topic, id);\n      const request = record.request;\n      try {\n        tvf = this.getTVFParams(id, request.params, result);\n      } catch (error) {\n        this.client.logger.warn(\n          `sendResult() -> getTVFParams() failed: ${(error as Error)?.message}`,\n        );\n      }\n    } catch (error) {\n      this.client.logger.error(`sendResult() -> history.get(${topic}, ${id}) failed`);\n      throw error;\n    }\n\n    if (isLinkMode) {\n      const redirectURL = getLinkModeURL(appLink, topic, message);\n      await (global as any).Linking.openURL(redirectURL, this.client.name);\n    } else {\n      const method = record.request.method as JsonRpcTypes.WcMethod;\n      const opts = ENGINE_RPC_OPTS[method].res;\n\n      opts.tvf = {\n        ...tvf,\n        correlationId: id,\n      };\n\n      if (throwOnFailedPublish) {\n        opts.internal = {\n          ...opts.internal,\n          throwOnFailedPublish: true,\n        };\n        await this.client.core.relayer.publish(topic, message, opts);\n      } else {\n        this.client.core.relayer\n          .publish(topic, message, opts)\n          .catch((error) => this.client.logger.error(error));\n      }\n    }\n\n    await this.client.core.history.resolve(payload);\n  };\n\n  private sendError: EnginePrivate[\"sendError\"] = async (params) => {\n    const { id, topic, error, encodeOpts, rpcOpts, appLink } = params;\n    const payload = formatJsonRpcError(id, error);\n    let message;\n    const isLinkMode = appLink && typeof (global as any)?.Linking !== \"undefined\";\n    try {\n      const encoding = isLinkMode ? BASE64URL : BASE64;\n      message = await this.client.core.crypto.encode(topic, payload, {\n        ...(encodeOpts || {}),\n        encoding,\n      });\n    } catch (error) {\n      await this.cleanup();\n      this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n    let record;\n    try {\n      record = await this.client.core.history.get(topic, id);\n    } catch (error) {\n      this.client.logger.error(`sendError() -> history.get(${topic}, ${id}) failed`);\n      throw error;\n    }\n\n    if (isLinkMode) {\n      const redirectURL = getLinkModeURL(appLink, topic, message);\n      await (global as any).Linking.openURL(redirectURL, this.client.name);\n    } else {\n      const method = record.request.method as JsonRpcTypes.WcMethod;\n      const opts = rpcOpts || ENGINE_RPC_OPTS[method].res;\n      // await is intentionally omitted to speed up performance\n      this.client.core.relayer.publish(topic, message, opts);\n    }\n\n    await this.client.core.history.resolve(payload);\n  };\n\n  private cleanup: EnginePrivate[\"cleanup\"] = async () => {\n    const sessionTopics: string[] = [];\n    const proposalIds: number[] = [];\n    this.client.session.getAll().forEach((session) => {\n      let toCleanup = false;\n      if (isExpired(session.expiry)) toCleanup = true;\n      if (!this.client.core.crypto.keychain.has(session.topic)) toCleanup = true;\n      if (toCleanup) sessionTopics.push(session.topic);\n    });\n    this.client.proposal.getAll().forEach((proposal) => {\n      if (isExpired(proposal.expiryTimestamp)) proposalIds.push(proposal.id);\n    });\n    await Promise.all([\n      ...sessionTopics.map((topic) => this.deleteSession({ topic })),\n      ...proposalIds.map((id) => this.deleteProposal(id)),\n    ]);\n  };\n\n  private isInitialized() {\n    if (!this.initialized) {\n      const { message } = getInternalError(\"NOT_INITIALIZED\", this.name);\n      throw new Error(message);\n    }\n  }\n\n  private async confirmOnlineStateOrThrow() {\n    await this.client.core.relayer.confirmOnlineStateOrThrow();\n  }\n\n  // ---------- Relay Events Router ----------------------------------- //\n\n  private registerRelayerEvents() {\n    this.client.core.relayer.on(RELAYER_EVENTS.message, (event: RelayerTypes.MessageEvent) => {\n      this.onProviderMessageEvent(event);\n    });\n  }\n\n  private onProviderMessageEvent = async (event: RelayerTypes.MessageEvent) => {\n    // capture any messages that arrive before the client is initialized so we can process them after initialization is complete\n    if (!this.initialized || this.relayMessageCache.length > 0) {\n      this.relayMessageCache.push(event);\n    } else {\n      await this.onRelayMessage(event);\n    }\n  };\n\n  private async onRelayMessage(event: RelayerTypes.MessageEvent) {\n    const { topic, message, attestation, transportType } = event;\n\n    // Retrieve the public key (if defined) to decrypt possible `auth_request` response\n    const { publicKey } = this.client.auth.authKeys.keys.includes(AUTH_PUBLIC_KEY_NAME)\n      ? this.client.auth.authKeys.get(AUTH_PUBLIC_KEY_NAME)\n      : ({ responseTopic: undefined, publicKey: undefined } as any);\n\n    try {\n      const payload = await this.client.core.crypto.decode(topic, message, {\n        receiverPublicKey: publicKey,\n        encoding: transportType === TRANSPORT_TYPES.link_mode ? BASE64URL : BASE64,\n      });\n\n      if (isJsonRpcRequest(payload)) {\n        this.client.core.history.set(topic, payload);\n        await this.onRelayEventRequest({\n          topic,\n          payload,\n          attestation,\n          transportType,\n          encryptedId: hashMessage(message),\n        });\n      } else if (isJsonRpcResponse(payload)) {\n        await this.client.core.history.resolve(payload);\n        await this.onRelayEventResponse({ topic, payload, transportType });\n        this.client.core.history.delete(topic, payload.id);\n      } else {\n        await this.onRelayEventUnknownPayload({ topic, payload, transportType });\n      }\n      await this.client.core.relayer.messages.ack(topic, message);\n    } catch (error) {\n      this.client.logger.error(error);\n    }\n  }\n\n  private onRelayEventRequest: EnginePrivate[\"onRelayEventRequest\"] = async (event) => {\n    this.requestQueue.queue.push(event);\n    await this.processRequestsQueue();\n  };\n\n  private processRequestsQueue = async () => {\n    if (this.requestQueue.state === ENGINE_QUEUE_STATES.active) {\n      this.client.logger.info(`Request queue already active, skipping...`);\n      return;\n    }\n\n    this.client.logger.info(\n      `Request queue starting with ${this.requestQueue.queue.length} requests`,\n    );\n\n    while (this.requestQueue.queue.length > 0) {\n      this.requestQueue.state = ENGINE_QUEUE_STATES.active;\n      const request = this.requestQueue.queue.shift();\n      if (!request) continue;\n\n      try {\n        await this.processRequest(request);\n      } catch (error) {\n        this.client.logger.warn(error);\n      }\n    }\n    this.requestQueue.state = ENGINE_QUEUE_STATES.idle;\n  };\n\n  private processRequest: EnginePrivate[\"onRelayEventRequest\"] = async (event) => {\n    const { topic, payload, attestation, transportType, encryptedId } = event;\n\n    const reqMethod = payload.method as JsonRpcTypes.WcMethod;\n\n    if (this.shouldIgnorePairingRequest({ topic, requestMethod: reqMethod })) {\n      return;\n    }\n\n    switch (reqMethod) {\n      case \"wc_sessionPropose\":\n        return await this.onSessionProposeRequest({ topic, payload, attestation, encryptedId });\n      case \"wc_sessionSettle\":\n        return await this.onSessionSettleRequest(topic, payload);\n      case \"wc_sessionUpdate\":\n        return await this.onSessionUpdateRequest(topic, payload);\n      case \"wc_sessionExtend\":\n        return await this.onSessionExtendRequest(topic, payload);\n      case \"wc_sessionPing\":\n        return await this.onSessionPingRequest(topic, payload);\n      case \"wc_sessionDelete\":\n        return await this.onSessionDeleteRequest(topic, payload);\n      case \"wc_sessionRequest\":\n        return await this.onSessionRequest({\n          topic,\n          payload,\n          attestation,\n          encryptedId,\n          transportType,\n        });\n      case \"wc_sessionEvent\":\n        return await this.onSessionEventRequest(topic, payload);\n      case \"wc_sessionAuthenticate\":\n        return await this.onSessionAuthenticateRequest({\n          topic,\n          payload,\n          attestation,\n          encryptedId,\n          transportType,\n        });\n      default:\n        return this.client.logger.info(`Unsupported request method ${reqMethod}`);\n    }\n  };\n\n  private onRelayEventResponse: EnginePrivate[\"onRelayEventResponse\"] = async (event) => {\n    const { topic, payload, transportType } = event;\n    const record = await this.client.core.history.get(topic, payload.id);\n    const resMethod = record.request.method as JsonRpcTypes.WcMethod;\n\n    switch (resMethod) {\n      case \"wc_sessionPropose\":\n        return this.onSessionProposeResponse(topic, payload, transportType);\n      case \"wc_sessionSettle\":\n        return this.onSessionSettleResponse(topic, payload);\n      case \"wc_sessionUpdate\":\n        return this.onSessionUpdateResponse(topic, payload);\n      case \"wc_sessionExtend\":\n        return this.onSessionExtendResponse(topic, payload);\n      case \"wc_sessionPing\":\n        return this.onSessionPingResponse(topic, payload);\n      case \"wc_sessionRequest\":\n        return this.onSessionRequestResponse(topic, payload);\n      case \"wc_sessionAuthenticate\":\n        return this.onSessionAuthenticateResponse(topic, payload);\n      default:\n        return this.client.logger.info(`Unsupported response method ${resMethod}`);\n    }\n  };\n\n  private onRelayEventUnknownPayload: EnginePrivate[\"onRelayEventUnknownPayload\"] = (event) => {\n    const { topic } = event;\n    const { message } = getInternalError(\n      \"MISSING_OR_INVALID\",\n      `Decoded payload on topic ${topic} is not identifiable as a JSON-RPC request or a response.`,\n    );\n    throw new Error(message);\n  };\n\n  private shouldIgnorePairingRequest: EnginePrivate[\"shouldIgnorePairingRequest\"] = (params) => {\n    const { topic, requestMethod } = params;\n    const expectedMethods = this.expectedPairingMethodMap.get(topic);\n    // check if the request method matches the expected method\n    if (!expectedMethods) return false;\n    if (expectedMethods.includes(requestMethod)) return false;\n\n    /**\n     * we want to make sure fallback session proposal is ignored only if there are subscribers\n     * for the `session_authenticate` event, otherwise this would result in no-op for the user\n     */\n    if (expectedMethods.includes(\"wc_sessionAuthenticate\")) {\n      if (this.client.events.listenerCount(\"session_authenticate\") > 0) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // ---------- Relay Events Handlers --------------------------------- //\n\n  private onSessionProposeRequest: EnginePrivate[\"onSessionProposeRequest\"] = async (args) => {\n    const { topic, payload, attestation, encryptedId } = args;\n    const { params, id } = payload;\n    try {\n      const event = this.client.core.eventClient.getEvent({ topic });\n\n      if (this.client.events.listenerCount(\"session_proposal\") === 0) {\n        console.warn(\"No listener for session_proposal event\");\n        event?.setError(EVENT_CLIENT_PAIRING_ERRORS.proposal_listener_not_found);\n      }\n\n      this.isValidConnect({ ...payload.params });\n      const expiryTimestamp =\n        params.expiryTimestamp || calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl);\n      const proposal = {\n        id,\n        pairingTopic: topic,\n        expiryTimestamp,\n        attestation,\n        encryptedId,\n        ...params,\n      };\n      await this.setProposal(id, proposal);\n\n      const verifyContext = await this.getVerifyContext({\n        attestationId: attestation,\n        hash: hashMessage(JSON.stringify(payload)),\n        encryptedId,\n        metadata: proposal.proposer.metadata,\n      });\n\n      event?.addTrace(EVENT_CLIENT_PAIRING_TRACES.emit_session_proposal);\n\n      this.client.events.emit(\"session_proposal\", { id, params: proposal, verifyContext });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n        rpcOpts: ENGINE_RPC_OPTS.wc_sessionPropose.autoReject,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionProposeResponse: EnginePrivate[\"onSessionProposeResponse\"] = async (\n    topic,\n    payload,\n    transportType,\n  ) => {\n    const { id } = payload;\n\n    if (isJsonRpcResult(payload)) {\n      const { result } = payload;\n      this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", result });\n      const proposal = this.client.proposal.get(id);\n      this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", proposal });\n      const selfPublicKey = proposal.proposer.publicKey;\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        selfPublicKey,\n      });\n      const peerPublicKey = result.responderPublicKey;\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        peerPublicKey,\n      });\n      const sessionTopic = await this.client.core.crypto.generateSharedKey(\n        selfPublicKey,\n        peerPublicKey,\n      );\n      this.pendingSessions.set(id, {\n        sessionTopic,\n        pairingTopic: topic,\n        proposalId: id,\n        publicKey: selfPublicKey,\n      });\n\n      const subscriptionId = await this.client.core.relayer.subscribe(sessionTopic, {\n        transportType,\n      });\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        subscriptionId,\n      });\n      await this.client.core.pairing.activate({ topic });\n    } else if (isJsonRpcError(payload)) {\n      await this.deleteProposal(id);\n      const target = engineEvent(\"session_connect\", id);\n      const listeners = this.events.listenerCount(target);\n      if (listeners === 0) {\n        throw new Error(`emitting ${target} without any listeners, 954`);\n      }\n      this.events.emit(target, { error: payload.error });\n    }\n  };\n\n  private onSessionSettleRequest: EnginePrivate[\"onSessionSettleRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id, params } = payload;\n    try {\n      this.isValidSessionSettleRequest(params);\n      const {\n        relay,\n        controller,\n        expiry,\n        namespaces,\n        sessionProperties,\n        scopedProperties,\n        sessionConfig,\n      } = payload.params;\n      const pendingSession = [...this.pendingSessions.values()].find(\n        (s) => s.sessionTopic === topic,\n      );\n\n      if (!pendingSession) {\n        return this.client.logger.error(`Pending session not found for topic ${topic}`);\n      }\n\n      const proposal = this.client.proposal.get(pendingSession.proposalId);\n\n      const session: SessionTypes.Struct = {\n        topic,\n        relay,\n        expiry,\n        namespaces,\n        acknowledged: true,\n        pairingTopic: pendingSession.pairingTopic,\n        requiredNamespaces: proposal.requiredNamespaces,\n        optionalNamespaces: proposal.optionalNamespaces,\n        controller: controller.publicKey,\n        self: {\n          publicKey: pendingSession.publicKey,\n          metadata: this.client.metadata,\n        },\n        peer: {\n          publicKey: controller.publicKey,\n          metadata: controller.metadata,\n        },\n        ...(sessionProperties && { sessionProperties }),\n        ...(scopedProperties && { scopedProperties }),\n        ...(sessionConfig && { sessionConfig }),\n        transportType: TRANSPORT_TYPES.relay,\n      };\n\n      await this.client.session.set(session.topic, session);\n      await this.setExpiry(session.topic, session.expiry);\n\n      await this.client.core.pairing.updateMetadata({\n        topic: pendingSession.pairingTopic,\n        metadata: session.peer.metadata,\n      });\n\n      this.client.events.emit(\"session_connect\", { session });\n      this.events.emit(engineEvent(\"session_connect\", pendingSession.proposalId), { session });\n\n      this.pendingSessions.delete(pendingSession.proposalId);\n      this.deleteProposal(pendingSession.proposalId, false);\n      this.cleanupDuplicatePairings(session);\n\n      await this.sendResult<\"wc_sessionSettle\">({\n        id: payload.id,\n        topic,\n        result: true,\n      });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionSettleResponse: EnginePrivate[\"onSessionSettleResponse\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    if (isJsonRpcResult(payload)) {\n      await this.client.session.update(topic, { acknowledged: true });\n      this.events.emit(engineEvent(\"session_approve\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      await this.client.session.delete(topic, getSdkError(\"USER_DISCONNECTED\"));\n      this.events.emit(engineEvent(\"session_approve\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionUpdateRequest: EnginePrivate[\"onSessionUpdateRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { params, id } = payload;\n    try {\n      const memoryKey = `${topic}_session_update`;\n      // compare the current request id with the last processed session update\n      // we want to update only if the request is newer than the last processed one\n      const lastSessionUpdateId = MemoryStore.get<number>(memoryKey);\n\n      if (lastSessionUpdateId && this.isRequestOutOfSync(lastSessionUpdateId, id)) {\n        this.client.logger.warn(`Discarding out of sync request - ${id}`);\n        this.sendError({ id, topic, error: getSdkError(\"INVALID_UPDATE_REQUEST\") });\n        return;\n      }\n      this.isValidUpdate({ topic, ...params });\n      try {\n        MemoryStore.set(memoryKey, id);\n        await this.client.session.update(topic, { namespaces: params.namespaces });\n        await this.sendResult<\"wc_sessionUpdate\">({\n          id,\n          topic,\n          result: true,\n        });\n      } catch (e) {\n        MemoryStore.delete(memoryKey);\n        throw e;\n      }\n\n      this.client.events.emit(\"session_update\", { id, topic, params });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  // compares the timestamp of the last processed request with the current request\n  // client <-> client rpc ID is timestamp + 3 random digits\n  private isRequestOutOfSync = (lastId: number, currentId: number) => {\n    return currentId.toString().slice(0, -3) < lastId.toString().slice(0, -3);\n  };\n\n  private onSessionUpdateResponse: EnginePrivate[\"onSessionUpdateResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_update\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_update\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_update\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionExtendRequest: EnginePrivate[\"onSessionExtendRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    try {\n      this.isValidExtend({ topic });\n      await this.setExpiry(topic, calcExpiry(SESSION_EXPIRY));\n      await this.sendResult<\"wc_sessionExtend\">({\n        id,\n        topic,\n        result: true,\n      });\n      this.client.events.emit(\"session_extend\", { id, topic });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionExtendResponse: EnginePrivate[\"onSessionExtendResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_extend\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_extend\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_extend\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionPingRequest: EnginePrivate[\"onSessionPingRequest\"] = async (topic, payload) => {\n    const { id } = payload;\n    try {\n      this.isValidPing({ topic });\n      await this.sendResult<\"wc_sessionPing\">({\n        id,\n        topic,\n        result: true,\n        throwOnFailedPublish: true,\n      });\n      this.client.events.emit(\"session_ping\", { id, topic });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionPingResponse: EnginePrivate[\"onSessionPingResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_ping\", id);\n\n    // put at the end of the stack to avoid a race condition\n    // where session_ping listener is not yet initialized\n    setTimeout(() => {\n      const listeners = this.events.listenerCount(target);\n      if (listeners === 0) {\n        throw new Error(`emitting ${target} without any listeners 2176`);\n      }\n\n      if (isJsonRpcResult(payload)) {\n        this.events.emit(engineEvent(\"session_ping\", id), {});\n      } else if (isJsonRpcError(payload)) {\n        this.events.emit(engineEvent(\"session_ping\", id), { error: payload.error });\n      }\n    }, 500);\n  };\n\n  private onSessionDeleteRequest: EnginePrivate[\"onSessionDeleteRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    try {\n      this.isValidDisconnect({ topic, reason: payload.params });\n      await Promise.all([\n        new Promise((resolve) => {\n          // RPC request needs to happen before deletion as it utalises session encryption\n          this.client.core.relayer.once(RELAYER_EVENTS.publish, async () => {\n            resolve(await this.deleteSession({ topic, id }));\n          });\n        }),\n        this.sendResult<\"wc_sessionDelete\">({\n          id,\n          topic,\n          result: true,\n        }),\n        this.cleanupPendingSentRequestsForTopic({ topic, error: getSdkError(\"USER_DISCONNECTED\") }),\n      ]).catch((err) => this.client.logger.error(err));\n    } catch (err: any) {\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionRequest: EnginePrivate[\"onSessionRequest\"] = async (args) => {\n    const { topic, payload, attestation, encryptedId, transportType } = args;\n    const { id, params } = payload;\n    try {\n      await this.isValidRequest({ topic, ...params });\n      const session = this.client.session.get(topic);\n      const verifyContext = await this.getVerifyContext({\n        attestationId: attestation,\n        hash: hashMessage(JSON.stringify(formatJsonRpcRequest(\"wc_sessionRequest\", params, id))),\n        encryptedId,\n        metadata: session.peer.metadata,\n        transportType,\n      });\n      const request = {\n        id,\n        topic,\n        params,\n        verifyContext,\n      };\n      await this.setPendingSessionRequest(request);\n\n      if (\n        transportType === TRANSPORT_TYPES.link_mode &&\n        session.peer.metadata.redirect?.universal\n      ) {\n        // save app as supported for link mode\n        this.client.core.addLinkModeSupportedApp(session.peer.metadata.redirect?.universal);\n      }\n\n      // without sequential processing. This bypasses deduplication provided by the queue,\n      // at-least-once delivery guarantee.\n      if (this.client.signConfig?.disableRequestQueue) {\n        this.emitSessionRequest(request);\n      } else {\n        this.addSessionRequestToSessionRequestQueue(request);\n        this.processSessionRequestQueue();\n      }\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionRequestResponse: EnginePrivate[\"onSessionRequestResponse\"] = (\n    _topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_request\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { result: payload.result });\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionEventRequest: EnginePrivate[\"onSessionEventRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id, params } = payload;\n    try {\n      // similar to session update, we want to discard out of sync requests\n      // additionally we have to check the event type as well e.g. chainChanged/accountsChanged\n      const memoryKey = `${topic}_session_event_${params.event.name}`;\n      // compare the current request id with the last processed session update\n      // we want to update only if the request is newer than the last processed one\n      const lastSessionUpdateId = MemoryStore.get<number>(memoryKey);\n      if (lastSessionUpdateId && this.isRequestOutOfSync(lastSessionUpdateId, id)) {\n        this.client.logger.info(`Discarding out of sync request - ${id}`);\n        return;\n      }\n\n      this.isValidEmit({ topic, ...params });\n      this.client.events.emit(\"session_event\", { id, topic, params });\n      MemoryStore.set(memoryKey, id);\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionAuthenticateResponse: EnginePrivate[\"onSessionAuthenticateResponse\"] = (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    this.client.logger.trace({\n      type: \"method\",\n      method: \"onSessionAuthenticateResponse\",\n      topic,\n      payload,\n    });\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { result: payload.result });\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionAuthenticateRequest: EnginePrivate[\"onSessionAuthenticateRequest\"] = async (\n    args,\n  ) => {\n    const { topic, payload, attestation, encryptedId, transportType } = args;\n    try {\n      const { requester, authPayload, expiryTimestamp } = payload.params;\n      const verifyContext = await this.getVerifyContext({\n        attestationId: attestation,\n        hash: hashMessage(JSON.stringify(payload)),\n        encryptedId,\n        metadata: requester.metadata,\n        transportType,\n      });\n      const pendingRequest = {\n        requester,\n        pairingTopic: topic,\n        id: payload.id,\n        authPayload,\n        verifyContext,\n        expiryTimestamp,\n      };\n      await this.setAuthRequest(payload.id, {\n        request: pendingRequest,\n        pairingTopic: topic,\n        transportType,\n      });\n\n      if (transportType === TRANSPORT_TYPES.link_mode && requester.metadata.redirect?.universal) {\n        // save app as supported for link mode\n        this.client.core.addLinkModeSupportedApp(requester.metadata.redirect.universal);\n      }\n\n      this.client.events.emit(\"session_authenticate\", {\n        topic,\n        params: payload.params,\n        id: payload.id,\n        verifyContext,\n      });\n    } catch (err: any) {\n      this.client.logger.error(err);\n\n      const receiverPublicKey = payload.params.requester.publicKey;\n      const senderPublicKey = await this.client.core.crypto.generateKeyPair();\n      const appLink = this.getAppLinkIfEnabled(payload.params.requester.metadata, transportType);\n\n      const encodeOpts = {\n        type: TYPE_1,\n        receiverPublicKey,\n        senderPublicKey,\n      };\n      await this.sendError({\n        id: payload.id,\n        topic,\n        error: err,\n        encodeOpts,\n        rpcOpts: ENGINE_RPC_OPTS.wc_sessionAuthenticate.autoReject,\n        appLink,\n      });\n    }\n  };\n\n  /**\n   * Adds a session request to the sequential processing queue.\n   *\n   * The queue provides built-in deduplication and sequential processing,\n   * which helps handle WalletConnect's at-least-once delivery guarantee.\n   */\n  private addSessionRequestToSessionRequestQueue = (request: PendingRequestTypes.Struct) => {\n    this.sessionRequestQueue.queue.push(request);\n  };\n\n  private cleanupAfterResponse = (params: EngineTypes.RespondParams) => {\n    this.deletePendingSessionRequest(params.response.id, { message: \"fulfilled\", code: 0 });\n    // intentionally delay the emitting of the next pending request a bit\n    setTimeout(() => {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n      this.processSessionRequestQueue();\n    }, toMiliseconds(this.requestQueueDelay));\n  };\n\n  // Allows for cleanup on any sent pending requests if the peer disconnects the session before responding\n  private cleanupPendingSentRequestsForTopic = ({\n    topic,\n    error,\n  }: {\n    topic: string;\n    error: ErrorResponse;\n  }) => {\n    const pendingRequests = this.client.core.history.pending;\n    if (pendingRequests.length > 0) {\n      const forSession = pendingRequests.filter(\n        (r) => r.topic === topic && r.request.method === \"wc_sessionRequest\",\n      );\n      forSession.forEach((r) => {\n        const id = r.request.id;\n        const target = engineEvent(\"session_request\", id);\n        const listeners = this.events.listenerCount(target);\n        if (listeners === 0) {\n          throw new Error(`emitting ${target} without any listeners`);\n        }\n        // notify .request() handler of the rejection\n        this.events.emit(engineEvent(\"session_request\", r.request.id), {\n          error,\n        });\n      });\n    }\n  };\n\n  private processSessionRequestQueue = () => {\n    if (this.sessionRequestQueue.state === ENGINE_QUEUE_STATES.active) {\n      this.client.logger.info(\"session request queue is already active.\");\n      return;\n    }\n    // Select the first/oldest request in the array to ensure last-in-first-out (LIFO)\n    const request = this.sessionRequestQueue.queue[0];\n    if (!request) {\n      this.client.logger.info(\"session request queue is empty.\");\n      return;\n    }\n\n    try {\n      this.emitSessionRequest(request);\n    } catch (error) {\n      this.client.logger.error(error);\n    }\n  };\n\n  /**\n   * Emits a session request event with built-in deduplication.\n   *\n   * This method implements deduplication using emittedSessionRequests set to handle\n   * WalletConnect's at-least-once delivery guarantee. However, when disableRequestQueue\n   * is enabled, additional deduplication may be needed at the consumer level.\n   */\n  private emitSessionRequest = (request: PendingRequestTypes.Struct) => {\n    if (this.emittedSessionRequests.has(request.id)) {\n      this.client.logger.warn(\n        {\n          id: request.id,\n        },\n        `Skipping emitting \\`session_request\\` event for duplicate request. id: ${request.id}`,\n      );\n      return;\n    }\n    this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.active;\n    this.emittedSessionRequests.add(request.id);\n    this.client.events.emit(\"session_request\", request);\n  };\n\n  // ---------- Expirer Events ---------------------------------------- //\n\n  private registerExpirerEvents() {\n    this.client.core.expirer.on(EXPIRER_EVENTS.expired, async (event: ExpirerTypes.Expiration) => {\n      const { topic, id } = parseExpirerTarget(event.target);\n      if (id && this.client.pendingRequest.keys.includes(id)) {\n        return await this.deletePendingSessionRequest(id, getInternalError(\"EXPIRED\"), true);\n      }\n      if (id && this.client.auth.requests.keys.includes(id)) {\n        return await this.deletePendingAuthRequest(id, getInternalError(\"EXPIRED\"), true);\n      }\n\n      if (topic) {\n        if (this.client.session.keys.includes(topic)) {\n          await this.deleteSession({ topic, expirerHasDeleted: true });\n          this.client.events.emit(\"session_expire\", { topic });\n        }\n      } else if (id) {\n        await this.deleteProposal(id, true);\n        this.client.events.emit(\"proposal_expire\", { id });\n      }\n    });\n  }\n\n  // ---------- Pairing Events ---------------------------------------- //\n  private registerPairingEvents() {\n    this.client.core.pairing.events.on(PAIRING_EVENTS.create, (pairing: PairingTypes.Struct) =>\n      this.onPairingCreated(pairing),\n    );\n    this.client.core.pairing.events.on(PAIRING_EVENTS.delete, (pairing: PairingTypes.Struct) => {\n      this.addToRecentlyDeleted(pairing.topic, \"pairing\");\n    });\n  }\n\n  /**\n   * when a pairing is created, we check if there is a pending proposal for it.\n   * if there is, we send it to onSessionProposeRequest to be processed as if it was received from the relay.\n   * It allows QR/URI to be scanned multiple times without having to create new pairing.\n   */\n  private onPairingCreated = (pairing: PairingTypes.Struct) => {\n    if (pairing.methods) {\n      this.expectedPairingMethodMap.set(pairing.topic, pairing.methods);\n    }\n    if (pairing.active) return;\n    const proposals = this.client.proposal.getAll();\n    const proposal = proposals.find((p) => p.pairingTopic === pairing.topic);\n    if (!proposal) return;\n    this.onSessionProposeRequest({\n      topic: pairing.topic,\n      payload: formatJsonRpcRequest(\n        \"wc_sessionPropose\",\n        {\n          ...proposal,\n          requiredNamespaces: proposal.requiredNamespaces,\n          optionalNamespaces: proposal.optionalNamespaces,\n          relays: proposal.relays,\n          proposer: proposal.proposer,\n          sessionProperties: proposal.sessionProperties,\n          scopedProperties: proposal.scopedProperties,\n        },\n        proposal.id,\n      ),\n      attestation: proposal.attestation,\n      encryptedId: proposal.encryptedId,\n    });\n  };\n\n  // ---------- Validation Helpers ------------------------------------ //\n  private isValidPairingTopic(topic: any) {\n    if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `pairing topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (!this.client.core.pairing.pairings.keys.includes(topic)) {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `pairing topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (isExpired(this.client.core.pairing.pairings.get(topic).expiry)) {\n      const { message } = getInternalError(\"EXPIRED\", `pairing topic: ${topic}`);\n      throw new Error(message);\n    }\n  }\n\n  private async isValidSessionTopic(topic: any) {\n    if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    // Store will throw custom message if topic was recently deleted\n    this.checkRecentlyDeleted(topic);\n    if (!this.client.session.keys.includes(topic)) {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `session topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (isExpired(this.client.session.get(topic).expiry)) {\n      await this.deleteSession({ topic });\n      const { message } = getInternalError(\"EXPIRED\", `session topic: ${topic}`);\n      throw new Error(message);\n    }\n\n    if (!this.client.core.crypto.keychain.has(topic)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session topic does not exist in keychain: ${topic}`,\n      );\n      await this.deleteSession({ topic });\n      throw new Error(message);\n    }\n  }\n\n  private async isValidSessionOrPairingTopic(topic: string) {\n    this.checkRecentlyDeleted(topic);\n    if (this.client.session.keys.includes(topic)) {\n      await this.isValidSessionTopic(topic);\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      this.isValidPairingTopic(topic);\n    } else if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session or pairing topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    } else {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `session or pairing topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n  }\n\n  private async isValidProposalId(id: any) {\n    if (!isValidId(id)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `proposal id should be a number: ${id}`,\n      );\n      throw new Error(message);\n    }\n    if (!this.client.proposal.keys.includes(id)) {\n      const { message } = getInternalError(\"NO_MATCHING_KEY\", `proposal id doesn't exist: ${id}`);\n      throw new Error(message);\n    }\n    if (isExpired(this.client.proposal.get(id).expiryTimestamp)) {\n      await this.deleteProposal(id);\n      const { message } = getInternalError(\"EXPIRED\", `proposal id: ${id}`);\n      throw new Error(message);\n    }\n  }\n\n  // ---------- Validation  ------------------------------------------- //\n\n  private isValidConnect: EnginePrivate[\"isValidConnect\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `connect() params: ${JSON.stringify(params)}`,\n      );\n      throw new Error(message);\n    }\n    const {\n      pairingTopic,\n      requiredNamespaces,\n      optionalNamespaces,\n      sessionProperties,\n      scopedProperties,\n      relays,\n    } = params;\n    if (!isUndefined(pairingTopic)) await this.isValidPairingTopic(pairingTopic);\n\n    if (!isValidRelays(relays, true)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `connect() relays: ${relays}`);\n      throw new Error(message);\n    }\n\n    // validate required namespaces only if they are defined\n    if (!isUndefined(requiredNamespaces) && isValidObject(requiredNamespaces) !== 0) {\n      const warning =\n        \"requiredNamespaces are deprecated and are automatically assigned to optionalNamespaces\";\n      // if logger level is one of the following, the logger.warn will not be shown, so we need to use console.warn\n      if ([\"fatal\", \"error\", \"silent\"].includes(this.client.logger.level)) {\n        console.warn(warning);\n      } else {\n        this.client.logger.warn(warning);\n      }\n      this.validateNamespaces(requiredNamespaces, \"requiredNamespaces\");\n    }\n\n    // validate optional namespaces only if they are defined\n    if (!isUndefined(optionalNamespaces) && isValidObject(optionalNamespaces) !== 0) {\n      this.validateNamespaces(optionalNamespaces, \"optionalNamespaces\");\n    }\n\n    // validate session properties only if they are defined\n    if (!isUndefined(sessionProperties)) {\n      this.validateSessionProps(sessionProperties, \"sessionProperties\");\n    }\n\n    if (!isUndefined(scopedProperties)) {\n      this.validateSessionProps(scopedProperties, \"scopedProperties\");\n\n      const requestedNamespaces = Object.keys(requiredNamespaces || {}).concat(\n        Object.keys(optionalNamespaces || {}),\n      );\n\n      const scopedNamespaces = Object.keys(scopedProperties);\n      // .split(\":\")[0] to account for inline <namespace>:<chainId>\n      const valid = scopedNamespaces.every((ns) => requestedNamespaces.includes(ns.split(\":\")[0]));\n      if (!valid) {\n        throw new Error(\n          `Scoped properties must be a subset of required/optional namespaces, received: ${JSON.stringify(\n            scopedProperties,\n          )}, required/optional namespaces: ${JSON.stringify(requestedNamespaces)}`,\n        );\n      }\n    }\n  };\n\n  private validateNamespaces = (\n    namespaces: ProposalTypes.RequiredNamespaces | ProposalTypes.OptionalNamespaces,\n    type: string,\n  ) => {\n    const validRequiredNamespacesError = isValidRequiredNamespaces(namespaces, \"connect()\", type);\n    if (validRequiredNamespacesError) throw new Error(validRequiredNamespacesError.message);\n  };\n\n  private isValidApprove: EnginePrivate[\"isValidApprove\"] = async (params) => {\n    if (!isValidParams(params))\n      throw new Error(\n        getInternalError(\"MISSING_OR_INVALID\", `approve() params: ${params}`).message,\n      );\n    const { id, namespaces, relayProtocol, sessionProperties, scopedProperties } = params;\n\n    this.checkRecentlyDeleted(id);\n    await this.isValidProposalId(id);\n    const proposal = this.client.proposal.get(id);\n    const validNamespacesError = isValidNamespaces(namespaces, \"approve()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    const conformingNamespacesError = isConformingNamespaces(\n      proposal.requiredNamespaces,\n      namespaces,\n      \"approve()\",\n    );\n    if (conformingNamespacesError) throw new Error(conformingNamespacesError.message);\n    if (!isValidString(relayProtocol, true)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `approve() relayProtocol: ${relayProtocol}`,\n      );\n      throw new Error(message);\n    }\n\n    if (!isUndefined(sessionProperties)) {\n      this.validateSessionProps(sessionProperties, \"sessionProperties\");\n    }\n\n    if (!isUndefined(scopedProperties)) {\n      this.validateSessionProps(scopedProperties, \"scopedProperties\");\n\n      const approvedNamespaces = new Set(Object.keys(namespaces));\n      const scopedNamespaces = Object.keys(scopedProperties);\n\n      // the approved scoped namespaces must be a subset of the approved namespaces\n      // .split(\":\")[0] to account for inline <namespace>:<chainId>\n      const valid = scopedNamespaces.every((ns) => approvedNamespaces.has(ns.split(\":\")[0]));\n      if (!valid) {\n        throw new Error(\n          `Scoped properties must be a subset of approved namespaces, received: ${JSON.stringify(\n            scopedProperties,\n          )}, approved namespaces: ${Array.from(approvedNamespaces).join(\", \")}`,\n        );\n      }\n    }\n  };\n\n  private isValidReject: EnginePrivate[\"isValidReject\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `reject() params: ${params}`);\n      throw new Error(message);\n    }\n    const { id, reason } = params;\n    this.checkRecentlyDeleted(id);\n    await this.isValidProposalId(id);\n    if (!isValidErrorReason(reason)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `reject() reason: ${JSON.stringify(reason)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidSessionSettleRequest: EnginePrivate[\"isValidSessionSettleRequest\"] = (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `onSessionSettleRequest() params: ${params}`,\n      );\n      throw new Error(message);\n    }\n    const { relay, controller, namespaces, expiry } = params;\n    if (!isValidRelay(relay)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `onSessionSettleRequest() relay protocol should be a string`,\n      );\n      throw new Error(message);\n    }\n    const validControllerError = isValidController(controller, \"onSessionSettleRequest()\");\n    if (validControllerError) throw new Error(validControllerError.message);\n    const validNamespacesError = isValidNamespaces(namespaces, \"onSessionSettleRequest()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    if (isExpired(expiry)) {\n      const { message } = getInternalError(\"EXPIRED\", `onSessionSettleRequest()`);\n      throw new Error(message);\n    }\n  };\n\n  private isValidUpdate: EnginePrivate[\"isValidUpdate\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `update() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, namespaces } = params;\n\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n    const session = this.client.session.get(topic);\n    const validNamespacesError = isValidNamespaces(namespaces, \"update()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    const conformingNamespacesError = isConformingNamespaces(\n      session.requiredNamespaces,\n      namespaces,\n      \"update()\",\n    );\n    if (conformingNamespacesError) throw new Error(conformingNamespacesError.message);\n    // TODO(ilja) - check if wallet\n  };\n\n  private isValidExtend: EnginePrivate[\"isValidExtend\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `extend() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n  };\n\n  private isValidRequest: EnginePrivate[\"isValidRequest\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `request() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, request, chainId, expiry } = params;\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n    const { namespaces } = this.client.session.get(topic);\n    if (!isValidNamespacesChainId(namespaces, chainId)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `request() chainId: ${chainId}`);\n      throw new Error(message);\n    }\n    if (!isValidRequest(request)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() ${JSON.stringify(request)}`,\n      );\n      throw new Error(message);\n    }\n    if (!isValidNamespacesRequest(namespaces, chainId, request.method)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() method: ${request.method}`,\n      );\n      throw new Error(message);\n    }\n    if (expiry && !isValidRequestExpiry(expiry, SESSION_REQUEST_EXPIRY_BOUNDARIES)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() expiry: ${expiry}. Expiry must be a number (in seconds) between ${SESSION_REQUEST_EXPIRY_BOUNDARIES.min} and ${SESSION_REQUEST_EXPIRY_BOUNDARIES.max}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidRespond: EnginePrivate[\"isValidRespond\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `respond() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, response } = params;\n    try {\n      // if the session is already disconnected, we can't respond to the request so we need to delete it\n      await this.isValidSessionTopic(topic);\n    } catch (error) {\n      if (params?.response?.id) this.cleanupAfterResponse(params);\n      throw error;\n    }\n    if (!isValidResponse(response)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `respond() response: ${JSON.stringify(response)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidPing: EnginePrivate[\"isValidPing\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `ping() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n    await this.isValidSessionOrPairingTopic(topic);\n  };\n\n  private isValidEmit: EnginePrivate[\"isValidEmit\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `emit() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, event, chainId } = params;\n    await this.isValidSessionTopic(topic);\n    const { namespaces } = this.client.session.get(topic);\n    if (!isValidNamespacesChainId(namespaces, chainId)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `emit() chainId: ${chainId}`);\n      throw new Error(message);\n    }\n    if (!isValidEvent(event)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `emit() event: ${JSON.stringify(event)}`,\n      );\n      throw new Error(message);\n    }\n    if (!isValidNamespacesEvent(namespaces, chainId, event.name)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `emit() event: ${JSON.stringify(event)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidDisconnect: EnginePrivate[\"isValidDisconnect\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `disconnect() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n    await this.isValidSessionOrPairingTopic(topic);\n  };\n\n  private isValidAuthenticate = (params: AuthTypes.SessionAuthenticateParams) => {\n    const { chains, uri, domain, nonce } = params;\n\n    // ----- validate params ----- //\n    if (!Array.isArray(chains) || chains.length === 0) {\n      throw new Error(\"chains is required and must be a non-empty array\");\n    }\n    if (!isValidString(uri, false)) {\n      throw new Error(\"uri is required parameter\");\n    }\n    if (!isValidString(domain, false)) {\n      throw new Error(\"domain is required parameter\");\n    }\n    if (!isValidString(nonce, false)) {\n      throw new Error(\"nonce is required parameter\");\n    }\n\n    // ----- reject multi namespaces ----- //\n    const uniqueNamespaces = [...new Set(chains.map((chain) => parseChainId(chain).namespace))];\n    if (uniqueNamespaces.length > 1) {\n      throw new Error(\n        \"Multi-namespace requests are not supported. Please request single namespace only.\",\n      );\n    }\n\n    const { namespace } = parseChainId(chains[0]);\n    if (namespace !== \"eip155\") {\n      throw new Error(\n        \"Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.\",\n      );\n    }\n  };\n\n  private getVerifyContext = async (params: {\n    attestationId?: string;\n    hash?: string;\n    encryptedId?: string;\n    metadata: CoreTypes.Metadata;\n    transportType?: RelayerTypes.TransportType;\n  }) => {\n    const { attestationId, hash, encryptedId, metadata, transportType } = params;\n    const context: Verify.Context = {\n      verified: {\n        verifyUrl: metadata.verifyUrl || VERIFY_SERVER,\n        validation: \"UNKNOWN\",\n        origin: metadata.url || \"\",\n      },\n    };\n\n    try {\n      if (transportType === TRANSPORT_TYPES.link_mode) {\n        const applink = this.getAppLinkIfEnabled(metadata, transportType);\n        context.verified.validation =\n          applink && new URL(applink).origin === new URL(metadata.url).origin ? \"VALID\" : \"INVALID\";\n        return context;\n      }\n      const result = await this.client.core.verify.resolve({\n        attestationId,\n        hash,\n        encryptedId,\n        verifyUrl: metadata.verifyUrl,\n      });\n      if (result) {\n        context.verified.origin = result.origin;\n        context.verified.isScam = result.isScam;\n        context.verified.validation =\n          result.origin === new URL(metadata.url).origin ? \"VALID\" : \"INVALID\";\n      }\n    } catch (e) {\n      this.client.logger.warn(e);\n    }\n\n    this.client.logger.debug(`Verify context: ${JSON.stringify(context)}`);\n    return context;\n  };\n\n  private validateSessionProps = (properties: SessionTypes.ScopedProperties, type: string) => {\n    Object.values(properties).forEach((property, index) => {\n      if (property === null || property === undefined) {\n        const { message } = getInternalError(\n          \"MISSING_OR_INVALID\",\n          `${type} must contain an existing value for each key. Received: ${property} for key ${\n            Object.keys(properties)[index]\n          }`,\n        );\n        throw new Error(message);\n      }\n    });\n  };\n\n  private getPendingAuthRequest = (id: number) => {\n    const request = this.client.auth.requests.get(id);\n    return typeof request === \"object\" ? request : undefined;\n  };\n\n  private addToRecentlyDeleted = (\n    id: string | number,\n    type: \"pairing\" | \"session\" | \"proposal\" | \"request\",\n  ) => {\n    this.recentlyDeletedMap.set(id, type);\n    // remove first half of the map if it exceeds the limit\n    if (this.recentlyDeletedMap.size >= this.recentlyDeletedLimit) {\n      let i = 0;\n      const numItemsToDelete = this.recentlyDeletedLimit / 2;\n      for (const k of this.recentlyDeletedMap.keys()) {\n        if (i++ >= numItemsToDelete) {\n          break;\n        }\n        this.recentlyDeletedMap.delete(k);\n      }\n    }\n  };\n\n  private checkRecentlyDeleted = (id: string | number) => {\n    const deletedRecord = this.recentlyDeletedMap.get(id);\n    if (deletedRecord) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `Record was recently deleted - ${deletedRecord}: ${id}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isLinkModeEnabled = (\n    peerMetadata?: CoreTypes.Metadata,\n    transportType?: RelayerTypes.TransportType,\n  ): boolean => {\n    if (!peerMetadata || transportType !== TRANSPORT_TYPES.link_mode) return false;\n\n    return (\n      this.client.metadata?.redirect?.linkMode === true &&\n      this.client.metadata?.redirect?.universal !== undefined &&\n      this.client.metadata?.redirect?.universal !== \"\" &&\n      peerMetadata?.redirect?.universal !== undefined &&\n      peerMetadata?.redirect?.universal !== \"\" &&\n      peerMetadata?.redirect?.linkMode === true &&\n      this.client.core.linkModeSupportedApps.includes(peerMetadata.redirect.universal) &&\n      typeof (global as any)?.Linking !== \"undefined\"\n    );\n  };\n\n  private getAppLinkIfEnabled = (\n    peerMetadata?: CoreTypes.Metadata,\n    transportType?: RelayerTypes.TransportType,\n  ): string | undefined => {\n    return this.isLinkModeEnabled(peerMetadata, transportType)\n      ? peerMetadata?.redirect?.universal\n      : undefined;\n  };\n\n  private handleLinkModeMessage = ({ url }: { url: string }) => {\n    if (!url || !url.includes(\"wc_ev\") || !url.includes(\"topic\")) return;\n\n    const topic = getSearchParamFromURL(url, \"topic\") || \"\";\n    const message = decodeURIComponent(getSearchParamFromURL(url, \"wc_ev\") || \"\");\n\n    const sessionExists = this.client.session.keys.includes(topic);\n\n    if (sessionExists) {\n      this.client.session.update(topic, { transportType: TRANSPORT_TYPES.link_mode });\n    }\n\n    this.client.core.dispatchEnvelope({ topic, message, sessionExists });\n  };\n\n  private registerLinkModeListeners = async () => {\n    if (isTestRun() || (isReactNative() && this.client.metadata.redirect?.linkMode)) {\n      const linking = (global as any)?.Linking;\n      // global.Linking is set by react-native-compat\n      if (typeof linking !== \"undefined\") {\n        // set URL listener\n        linking.addEventListener(\"url\", this.handleLinkModeMessage, this.client.name);\n\n        // check for initial URL -> cold boots\n        const initialUrl = await linking.getInitialURL();\n        if (initialUrl) {\n          // wait to process the message to allow event listeners to be registered by the implementing app\n          setTimeout(() => {\n            this.handleLinkModeMessage({ url: initialUrl });\n          }, 50);\n        }\n      }\n    }\n  };\n\n  private getTVFParams = (\n    id: number,\n    params: JsonRpcTypes.RequestParams[\"wc_sessionRequest\"],\n    result?: any,\n  ) => {\n    // this check will filter all Sign protocol methods since they don't have a method property\n    if (!params.request?.method) {\n      return {};\n    }\n\n    const tvf: RelayerTypes.ITVF = {\n      correlationId: id,\n      rpcMethods: [params.request.method],\n      chainId: params.chainId,\n    };\n    try {\n      const txHashes = this.extractTxHashesFromResult(params.request, result);\n      tvf.txHashes = txHashes;\n      tvf.contractAddresses = this.isValidContractData(params.request.params)\n        ? [params.request.params?.[0]?.to]\n        : [];\n    } catch (e) {\n      this.client.logger.warn(\"Error getting TVF params\", e);\n    }\n    return tvf;\n  };\n\n  private isValidContractData = (params: any) => {\n    if (!params) return false;\n    try {\n      const data = params?.data || params?.[0]?.data;\n\n      if (!data.startsWith(\"0x\")) return false;\n\n      const hexPart = data.slice(2);\n      if (!/^[0-9a-fA-F]*$/.test(hexPart)) return false;\n\n      return hexPart.length % 2 === 0;\n    } catch (e) {}\n    return false;\n  };\n\n  private extractTxHashesFromResult = (\n    request: JsonRpcTypes.RequestParams[\"wc_sessionRequest\"][\"request\"],\n    result: any,\n  ): string[] => {\n    try {\n      if (!result) return [];\n\n      const method = request.method;\n      const methodConfig = TVF_METHODS[method as keyof typeof TVF_METHODS];\n\n      if (method === \"sui_signTransaction\") {\n        return [getSuiDigest(result.transactionBytes)];\n      }\n\n      if (method === \"near_signTransaction\") {\n        return [getNearTransactionIdFromSignedTransaction(result)];\n      }\n\n      if (method === \"near_signTransactions\") {\n        return result.map((tx: any) => getNearTransactionIdFromSignedTransaction(tx));\n      }\n\n      if (method === \"xrpl_signTransactionFor\" || method === \"xrpl_signTransaction\") {\n        return [result.tx_json?.hash];\n      }\n\n      if (method === \"polkadot_signTransaction\") {\n        return [\n          buildSignedExtrinsicHash({\n            transaction: request.params.transactionPayload,\n            signature: result.signature,\n          }),\n        ];\n      }\n\n      if (method === \"algo_signTxn\") {\n        return isValidArray(result)\n          ? result.map((tx: any) => getAlgorandTransactionId(tx))\n          : [getAlgorandTransactionId(result)];\n      }\n\n      if (method === \"cosmos_signDirect\") {\n        return [getSignDirectHash(result)];\n      }\n\n      // result = 0x...\n      if (typeof result === \"string\") {\n        return [result];\n      }\n\n      // result = { key: [0x...] } or { key: 0x... }\n      const hashes: string[] = result[methodConfig.key];\n\n      // result = { key: [0x...] }\n      if (isValidArray(hashes)) {\n        if (method === \"solana_signAllTransactions\") {\n          return hashes.map((hash) => extractSolanaTransactionId(hash));\n        }\n\n        return hashes;\n\n        // result = { key: 0x... }\n      } else if (typeof hashes === \"string\") {\n        return [hashes];\n      }\n    } catch (e) {\n      this.client.logger.warn(\"Error extracting tx hashes from result\", e);\n    }\n    return [];\n  };\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, ProposalTypes } from \"@walletconnect/types\";\n\nimport { SIGN_CLIENT_STORAGE_PREFIX, PROPOSAL_CONTEXT } from \"../constants\";\n\nexport class Proposal extends Store<number, ProposalTypes.Struct> {\n  constructor(\n    public core: ICore,\n    public logger: Logger,\n  ) {\n    super(core, logger, PROPOSAL_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, SessionTypes } from \"@walletconnect/types\";\n\nimport { SIGN_CLIENT_STORAGE_PREFIX, SESSION_CONTEXT } from \"../constants\";\n\nexport class Session extends Store<string, SessionTypes.Struct> {\n  constructor(\n    public core: ICore,\n    public logger: Logger,\n  ) {\n    super(core, logger, SESSION_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, PendingRequestTypes } from \"@walletconnect/types\";\nimport { REQUEST_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX } from \"../constants\";\n\nexport class PendingRequest extends Store<number, PendingRequestTypes.Struct> {\n  constructor(\n    public core: ICore,\n    public logger: Logger,\n  ) {\n    super(\n      core,\n      logger,\n      REQUEST_CONTEXT,\n      SIGN_CLIENT_STORAGE_PREFIX,\n      (val: PendingRequestTypes.Struct) => val.id,\n    );\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore } from \"@walletconnect/types\";\n\nimport { AUTH_KEYS_CONTEXT, AUTH_STORAGE_PREFIX, AUTH_PUBLIC_KEY_NAME } from \"../constants\";\n\nexport class AuthKey extends Store<string, { responseTopic: string; publicKey: string }> {\n  constructor(\n    public core: ICore,\n    public logger: Logger,\n  ) {\n    super(core, logger, AUTH_KEYS_CONTEXT, AUTH_STORAGE_PREFIX, () => AUTH_PUBLIC_KEY_NAME);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore } from \"@walletconnect/types\";\n\nimport { AUTH_PAIRING_TOPIC_CONTEXT, AUTH_STORAGE_PREFIX } from \"../constants\";\n\nexport class AuthPairingTopic extends Store<string, { topic: string; pairingTopic: string }> {\n  constructor(\n    public core: ICore,\n    public logger: Logger,\n  ) {\n    super(core, logger, AUTH_PAIRING_TOPIC_CONTEXT, AUTH_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { AuthTypes, ICore } from \"@walletconnect/types\";\n\nimport { AUTH_STORAGE_PREFIX, AUTH_REQUEST_CONTEXT } from \"../constants\";\n\nexport class AuthRequest extends Store<number, AuthTypes.PendingRequest> {\n  constructor(\n    public core: ICore,\n    public logger: Logger,\n  ) {\n    super(\n      core,\n      logger,\n      AUTH_REQUEST_CONTEXT,\n      AUTH_STORAGE_PREFIX,\n      (val: AuthTypes.PendingRequest) => val.id,\n    );\n  }\n}\n","import { Logger } from \"@walletconnect/logger\";\nimport { IAuth, ICore } from \"@walletconnect/types\";\nimport { AuthPairingTopic } from \"./authPairingTopic\";\nimport { AuthRequest } from \"./authRequest\";\nimport { AuthKey } from \"./authKey\";\n\nexport class AuthStore {\n  public authKeys: IAuth[\"authKeys\"];\n  public pairingTopics: IAuth[\"pairingTopics\"];\n  public requests: IAuth[\"requests\"];\n\n  constructor(\n    public core: ICore,\n    public logger: Logger,\n  ) {\n    this.authKeys = new AuthKey(this.core, this.logger);\n    this.pairingTopics = new AuthPairingTopic(this.core, this.logger);\n    this.requests = new AuthRequest(this.core, this.logger);\n  }\n\n  public async init() {\n    await this.authKeys.init();\n    await this.pairingTopics.init();\n    await this.requests.init();\n  }\n}\n","import { Core } from \"@walletconnect/core\";\nimport {\n  generateChildLogger,\n  getDefaultLoggerOptions,\n  getLoggerContext,\n  pino,\n} from \"@walletconnect/logger\";\nimport { SignClientTypes, ISignClient, ISignClientEvents, EngineTypes } from \"@walletconnect/types\";\nimport { populateAppMetadata } from \"@walletconnect/utils\";\nimport { EventEmitter } from \"events\";\nimport { SIGN_CLIENT_DEFAULT, SIGN_CLIENT_PROTOCOL, SIGN_CLIENT_VERSION } from \"./constants\";\nimport { AuthStore, Engine, PendingRequest, Proposal, Session } from \"./controllers\";\n\nexport class SignClient extends ISignClient {\n  public readonly protocol = SIGN_CLIENT_PROTOCOL;\n  public readonly version = SIGN_CLIENT_VERSION;\n  public readonly name: ISignClient[\"name\"] = SIGN_CLIENT_DEFAULT.name;\n  public readonly metadata: ISignClient[\"metadata\"];\n\n  public core: ISignClient[\"core\"];\n  public logger: ISignClient[\"logger\"];\n  public events: ISignClient[\"events\"] = new EventEmitter();\n  public engine: ISignClient[\"engine\"];\n  public session: ISignClient[\"session\"];\n  public proposal: ISignClient[\"proposal\"];\n  public pendingRequest: ISignClient[\"pendingRequest\"];\n  public auth: ISignClient[\"auth\"];\n  public signConfig?: ISignClient[\"signConfig\"];\n\n  static async init(opts?: SignClientTypes.Options) {\n    const client = new SignClient(opts);\n    await client.initialize();\n\n    return client;\n  }\n\n  constructor(opts?: SignClientTypes.Options) {\n    super(opts);\n\n    this.name = opts?.name || SIGN_CLIENT_DEFAULT.name;\n    this.metadata = populateAppMetadata(opts?.metadata);\n    this.signConfig = opts?.signConfig;\n\n    const logger =\n      typeof opts?.logger !== \"undefined\" && typeof opts?.logger !== \"string\"\n        ? opts.logger\n        : pino(getDefaultLoggerOptions({ level: opts?.logger || SIGN_CLIENT_DEFAULT.logger }));\n\n    this.core = opts?.core || new Core(opts);\n    this.logger = generateChildLogger(logger, this.name);\n    this.session = new Session(this.core, this.logger);\n    this.proposal = new Proposal(this.core, this.logger);\n    this.pendingRequest = new PendingRequest(this.core, this.logger);\n    this.engine = new Engine(this);\n    this.auth = new AuthStore(this.core, this.logger);\n  }\n\n  get context() {\n    return getLoggerContext(this.logger);\n  }\n\n  get pairing() {\n    return this.core.pairing.pairings;\n  }\n\n  // ---------- Events ----------------------------------------------- //\n\n  public on: ISignClientEvents[\"on\"] = (name, listener) => {\n    return this.events.on(name, listener);\n  };\n\n  public once: ISignClientEvents[\"once\"] = (name, listener) => {\n    return this.events.once(name, listener);\n  };\n\n  public off: ISignClientEvents[\"off\"] = (name, listener) => {\n    return this.events.off(name, listener);\n  };\n\n  public removeListener: ISignClientEvents[\"removeListener\"] = (name, listener) => {\n    return this.events.removeListener(name, listener);\n  };\n\n  public removeAllListeners: ISignClientEvents[\"removeAllListeners\"] = (name) => {\n    return this.events.removeAllListeners(name);\n  };\n\n  // ---------- Engine ----------------------------------------------- //\n\n  public connect: ISignClient[\"connect\"] = async (params) => {\n    try {\n      return await this.engine.connect(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public pair: ISignClient[\"pair\"] = async (params) => {\n    try {\n      return await this.engine.pair(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public approve: ISignClient[\"approve\"] = async (params) => {\n    try {\n      return await this.engine.approve(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public reject: ISignClient[\"reject\"] = async (params) => {\n    try {\n      return await this.engine.reject(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public update: ISignClient[\"update\"] = async (params) => {\n    try {\n      return await this.engine.update(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public extend: ISignClient[\"extend\"] = async (params) => {\n    try {\n      return await this.engine.extend(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public request: ISignClient[\"request\"] = async <T>(params: EngineTypes.RequestParams) => {\n    try {\n      return await this.engine.request<T>(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public respond: ISignClient[\"respond\"] = async (params) => {\n    try {\n      return await this.engine.respond(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public ping: ISignClient[\"ping\"] = async (params) => {\n    try {\n      return await this.engine.ping(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public emit: ISignClient[\"emit\"] = async (params) => {\n    try {\n      return await this.engine.emit(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public disconnect: ISignClient[\"disconnect\"] = async (params) => {\n    try {\n      return await this.engine.disconnect(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public find: ISignClient[\"find\"] = (params) => {\n    try {\n      return this.engine.find(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public getPendingSessionRequests: ISignClient[\"getPendingSessionRequests\"] = () => {\n    try {\n      return this.engine.getPendingSessionRequests();\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public authenticate: ISignClient[\"authenticate\"] = async (params, walletUniversalLink) => {\n    try {\n      return await this.engine.authenticate(params, walletUniversalLink);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public formatAuthMessage: ISignClient[\"formatAuthMessage\"] = (params) => {\n    try {\n      return this.engine.formatAuthMessage(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public approveSessionAuthenticate: ISignClient[\"approveSessionAuthenticate\"] = async (params) => {\n    try {\n      return await this.engine.approveSessionAuthenticate(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public rejectSessionAuthenticate: ISignClient[\"rejectSessionAuthenticate\"] = async (params) => {\n    try {\n      return await this.engine.rejectSessionAuthenticate(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  // ---------- Private ----------------------------------------------- //\n\n  private async initialize() {\n    this.logger.trace(`Initialized`);\n    try {\n      await this.core.start();\n      await this.session.init();\n      await this.proposal.init();\n      await this.pendingRequest.init();\n      await this.auth.init();\n      await this.engine.init();\n      this.logger.info(`SignClient Initialization Success`);\n    } catch (error: any) {\n      this.logger.info(`SignClient Initialization Failure`);\n      this.logger.error(error.message);\n      throw error;\n    }\n  }\n}\n","import { SignClient as Client } from \"./client\";\nimport { Session } from \"./controllers/session\";\nexport * from \"./constants\";\n\nexport const SessionStore = Session;\nexport const SignClient = Client;\nexport default Client;\n"],"names":["THIRTY_DAYS","SEVEN_DAYS","FIVE_MINUTES","ONE_DAY","ONE_HOUR","IEngine","client","__publicField","ENGINE_CONTEXT","EventEmmiter","ENGINE_QUEUE_STATES","LimitedSet","ONE_SECOND","ENGINE_RPC_OPTS","toMiliseconds","params","connectParams","__spreadProps","__spreadValues","mergeRequiredAndOptionalNamespaces","pairingTopic","requiredNamespaces","optionalNamespaces","sessionProperties","scopedProperties","relays","topic","uri","active","pairing","error","newTopic","newUri","message","getInternalError","publicKey","expiry","expiryTimestamp","calcExpiry","proposal","RELAYER_DEFAULT_PROTOCOL","payloadId","sessionConnectTarget","engineEvent","reject","resolve","approval","createDelayedPromise","PROPOSAL_EXPIRY_MESSAGE","proposalExpireHandler","id","session","_a","_b","_c","configEvent","EVENT_CLIENT_SESSION_TRACES","EVENT_CLIENT_SESSION_ERRORS","relayProtocol","namespaces","sessionConfig","proposer","event","selfPublicKey","peerPublicKey","sessionTopic","sessionSettle","SESSION_EXPIRY","transportType","TRANSPORT_TYPES","getSdkError","reason","acknowledged","clientRpcId","relayRpcId","getBigIntRpcId","oldNamespaces","e","chainId","request","done","result","protocolMethod","appLink","protocolRequestParams","wcDeepLink","getDeepLink","WALLETCONNECT_DEEPLINK_CHOICE","handleDeeplinkRedirect","response","isJsonRpcResult","isJsonRpcError","isSessionCompatible","walletUniversalLink","isLinkMode","chains","statement","domain","nonce","type","exp","nbf","methods","resources","connectionUri","responseTopic","hashKey","AUTH_PUBLIC_KEY_NAME","namespace","parseChainId","recap","createEncodedRecap","getRecapFromResources","mergeEncodedRecaps","authRequestExpiry","authenticateId","sessionConnectEventTarget","authenticateEventTarget","onSessionConnect","onAuthenticate","payload","cacaos","responder","approvedMethods","approvedAccounts","cacao","validateSignedCacao","approvedChains","getNamespacedDidChainId","parsedAddress","getDidAddress","methodsfromRecap","getMethodsFromRecap","chainsFromRecap","getChainsFromRecap","chain","buildNamespacesFromAuth","linkModeURL","formatJsonRpcRequest","TYPE_2","BASE64URL","getLinkModeURL","sessionAuthenticateResponseParams","auths","EVENT_CLIENT_AUTHENTICATE_TRACES","EVENT_CLIENT_AUTHENTICATE_ERRORS","pendingRequest","receiverPublicKey","senderPublicKey","encodeOpts","TYPE_1","invalidErr","iss","formatMessage","duplicates","p","expirerHasDeleted","emitEvent","self","r","verifyContext","args","method","throwOnFailedPublish","tvf","publishOpts","encoding","BASE64","attestation","METHODS_TO_VERIFY","decryptedId","hashMessage","opts","redirectURL","proposeSessionPayload","proposeSessionMessage","attestationId","pairingProposalResponse","sessionSettleRequest","pairingPayload","formatJsonRpcResult","pairingResponseMessage","sessionSettlePayload","sessionSettlementRequestMessage","record","rpcOpts","formatJsonRpcError","sessionTopics","proposalIds","toCleanup","isExpired","encryptedId","reqMethod","resMethod","requestMethod","expectedMethods","EVENT_CLIENT_PAIRING_ERRORS","EVENT_CLIENT_PAIRING_TRACES","err","subscriptionId","target","relay","controller","pendingSession","s","memoryKey","lastSessionUpdateId","MemoryStore","lastId","currentId","_topic","RELAYER_EVENTS","requester","authPayload","pendingRequests","isValidParams","isUndefined","isValidRelays","isValidObject","warning","requestedNamespaces","ns","validRequiredNamespacesError","isValidRequiredNamespaces","validNamespacesError","isValidNamespaces","conformingNamespacesError","isConformingNamespaces","isValidString","approvedNamespaces","isValidErrorReason","isValidRelay","validControllerError","isValidController","isValidNamespacesChainId","isValidRequest","isValidNamespacesRequest","isValidRequestExpiry","SESSION_REQUEST_EXPIRY_BOUNDARIES","isValidResponse","isValidEvent","isValidNamespacesEvent","hash","metadata","context","VERIFY_SERVER","applink","properties","property","index","i","numItemsToDelete","k","deletedRecord","peerMetadata","_d","_e","_f","_g","_h","_i","url","getSearchParamFromURL","sessionExists","isTestRun","isReactNative","linking","initialUrl","txHashes","data","hexPart","methodConfig","TVF_METHODS","getSuiDigest","getNearTransactionIdFromSignedTransaction","tx","buildSignedExtrinsicHash","isValidArray","getAlgorandTransactionId","getSignDirectHash","hashes","extractSolanaTransactionId","topics","pendingMessages","messages","isJsonRpcRequest","isJsonRpcResponse","EXPIRER_EVENTS","parseExpirerTarget","PAIRING_EVENTS","isValidId","Store","core","logger","PROPOSAL_CONTEXT","SIGN_CLIENT_STORAGE_PREFIX","SESSION_CONTEXT","REQUEST_CONTEXT","val","AUTH_KEYS_CONTEXT","AUTH_STORAGE_PREFIX","AUTH_PAIRING_TOPIC_CONTEXT","AUTH_REQUEST_CONTEXT","o","AuthKey","AuthPairingTopic","AuthRequest","SignClient","ISignClient","SIGN_CLIENT_PROTOCOL","SIGN_CLIENT_VERSION","SIGN_CLIENT_DEFAULT","EventEmitter","name","listener","populateAppMetadata","pino","getDefaultLoggerOptions","Core","generateChildLogger","Session","Proposal","PendingRequest","Engine","AuthStore","getLoggerContext","Client"],"mappings":"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"}